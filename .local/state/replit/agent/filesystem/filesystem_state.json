{"file_contents":{"README.md":{"content":"# ROBOFEST 2025 - Battle of Smart Racers\n\nA cutting-edge full-stack web application for ROBOFEST 2025, featuring advanced Three.js 3D robotic animations, comprehensive event information, and immersive user experiences optimized for both desktop and mobile devices.\n\n## 🚀 Features\n\n- **3D Robotic Animations**: Enhanced Three.js scenes with PBR materials and bloom effects\n- **Interactive Hero Robot**: Neon blue glowing mascot with particle systems\n- **Robotic Assembly Showcase**: Animated robotic arm with realistic materials\n- **Responsive Design**: Mobile-optimized with adaptive 3D quality settings\n- **Modern UI/UX**: Glass morphism effects and GSAP ScrollTrigger animations\n- **Event Management**: Comprehensive competition information and registration\n- **Contact System**: Backend API with data persistence\n\n## 🛠️ Tech Stack\n\n### Frontend\n- **React 18** with TypeScript\n- **Vite** for development and building\n- **Tailwind CSS** with custom robotic theme\n- **Three.js** for 3D graphics and animations\n- **GSAP** for advanced scroll animations\n- **Wouter** for lightweight routing\n- **Radix UI** with shadcn/ui components\n- **TanStack Query** for state management\n\n### Backend\n- **Node.js** with Express.js\n- **TypeScript** with ES modules\n- **Drizzle ORM** for database operations\n- **Neon Database** (serverless PostgreSQL)\n- **Zod** for schema validation\n\n## 📋 Prerequisites\n\nBefore running this project locally, ensure you have:\n\n- **Node.js** (version 18 or higher)\n- **npm** or **yarn** package manager\n- **Git** for version control\n\n## 🔧 Local Development Setup\n\n### 1. Clone the Repository\n\n```bash\ngit clone <repository-url>\ncd robofest-2025\n```\n\n### 2. Install Dependencies\n\n```bash\nnpm install\n```\n\n### 3. Environment Configuration\n\nCreate a `.env` file in the root directory:\n\n```env\n# Database Configuration (Optional for development)\nDATABASE_URL=\"your-neon-database-url\"\n\n# Development Settings\nNODE_ENV=development\n```\n\n**Note**: The application uses in-memory storage by default, so a database connection is optional for local development.\n\n### 4. Start the Development Server\n\n```bash\nnpm run dev\n```\n\nThis command will:\n- Start the Express.js backend server on port 5000\n- Launch the Vite development server with hot reload\n- Serve both frontend and backend on the same port\n\n### 5. Access the Application\n\nOpen your browser and navigate to:\n```\nhttp://localhost:5000\n```\n\n## 🌐 Available Pages\n\n- **Home** (`/`) - Hero section with 3D robot and event overview\n- **Events** (`/events`) - Detailed competition information\n- **About** (`/about`) - Organization and sponsor information\n- **Roboroarz** (`/roboroarz`) - Special event page with videos\n- **Registration** (`/registration`) - Competition registration form\n- **Contact** (`/contact`) - Contact form and information\n\n## 🎮 3D Features\n\n### Hero Robot Scene\n- Interactive 3D robot with neon blue glow\n- Particle system effects\n- OrbitControls for user interaction\n- Auto-rotation and pulse animations\n\n### Feature Assembly Scene\n- Robotic arm with realistic PBR materials\n- Automated assembly sequence animation\n- Bloom post-processing effects\n- Lazy-loading for performance optimization\n\n## 📱 Mobile Optimization\n\n- Reduced particle counts on mobile devices\n- Adaptive device pixel ratio (≤1.5 on mobile)\n- LOD (Level of Detail) optimization\n- Touch-friendly controls and interactions\n\n## 🔨 Build Commands\n\n```bash\n# Development\nnpm run dev\n\n# Build for production\nnpm run build\n\n# Start production server\nnpm start\n\n# Type checking\nnpm run type-check\n\n# Database operations (if using database)\nnpm run db:generate\nnpm run db:push\n```\n\n## 📁 Project Structure\n\n```\n├── client/                 # Frontend React application\n│   ├── src/\n│   │   ├── components/     # Reusable UI components\n│   │   │   ├── three/      # Three.js 3D scene components\n│   │   │   ├── ui/         # shadcn/ui components\n│   │   │   └── layout/     # Layout components\n│   │   ├── pages/          # Page components\n│   │   ├── lib/            # Utility libraries\n│   │   └── hooks/          # Custom React hooks\n│   └── index.html\n├── server/                 # Backend Express application\n│   ├── index.ts           # Server entry point\n│   ├── routes.ts          # API routes\n│   └── storage.ts         # Data storage interface\n├── shared/                 # Shared types and schemas\n└── package.json\n```\n\n## 🎨 Customization\n\n### Theme Colors\nUpdate CSS variables in `client/src/index.css`:\n```css\n:root {\n  --robot-glow-color: #00D4FF;\n  --primary: hsl(207, 90%, 54%);\n  --electric-blue: hsl(195, 100%, 50%);\n  /* Add more custom colors */\n}\n```\n\n### 3D Scene Configuration\nModify Three.js scenes in `client/src/components/three/`:\n- `hero-robot-scene.tsx` - Hero mascot configuration\n- `feature-scene.tsx` - Assembly robot settings\n\n## 🐛 Troubleshooting\n\n### Common Issues\n\n1. **Three.js Not Loading**\n   - Ensure Three.js CDN links are accessible\n   - Check browser console for loading errors\n\n2. **3D Performance Issues**\n   - Enable device performance adaptations\n   - Reduce particle counts in mobile view\n\n3. **Build Errors**\n   - Clear `node_modules` and reinstall dependencies\n   - Check TypeScript configuration\n\n### Browser Compatibility\n\n- **Chrome**: Full support (recommended)\n- **Firefox**: Full support\n- **Safari**: Full support with WebGL enabled\n- **Edge**: Full support\n\n## 📞 Support\n\nFor technical support or questions:\n- **Faculty SPOC**: Dr. Vidhyalakshmi M K (vidhyalm1@srmist.edu.in)\n- **Student SPOC**: Harshil Malhotra (hm3673@srmist.edu.in)\n\n## 📄 License\n\nThis project is created for ROBOFEST 2025 at SRM Institute of Science & Technology.\n\n---\n\n**Built with ❤️ by the ISD Lab Team**","size_bytes":5857},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# ROBOFEST 2025 - Battle of Smart Racers\n\n## Overview\n\nThis is a cutting-edge full-stack web application for ROBOFEST 2025, a premier robotics competition event at SRM Institute of Science & Technology. The website features advanced Three.js 3D robotic animations, interactive WebGL effects, and a fully responsive UI/UX design optimized for both desktop and mobile devices. The application provides comprehensive event information, registration portals, and immersive 3D experiences that showcase the excitement of robotics competitions.\n\n## Recent Changes (January 2025)\n\n- **Complete Robot Gallery Removal**: Eliminated entire gallery section and modal components\n- **Enhanced 3D Scenes Implementation**: \n  - Hero Mascot Scene: WebGL canvas with neon blue glowing robot, particle system, OrbitControls\n  - Feature Scene: Robotic arm assembly with PBR materials, bloom effects, lazy initialization\n- **Performance Optimizations**: Device pixel ratio ≤1.5 on mobile, LOD optimization, intersection observer lazy loading\n- **CSS Variable Integration**: Added --robot-glow-color for dynamic glow control\n- **About Page Addition**: Comprehensive organizer/sponsor information with responsive cards\n- **README Documentation**: Complete localhost setup guide and project architecture\n- **Navigation Enhancement**: Added About page to main navigation menu\n- **EventModal Integration**: Added modal system for event details with neon border effects\n- **About Page Redesign**: University/Department logos, sponsor tier cards (Platinum/Gold/Silver), removed Mission/Vision sections\n- **Footer Enhancement**: Added Instagram handle with neon hover effects and ROBOFEST logo\n- **Neon Border CSS**: Custom neon border utilities with gradient animations and hover effects\n- **Replit Migration**: Successfully migrated project from Replit Agent to Replit environment with tsx package installation\n- **Core Team Enhancement**: Added core team member images and names with neon glow effects and animations to committee page\n- **Developer Team Addition**: Added developer team images (Aadarsh Jaiswal, Swapnil Vats, Ayushmann) with designations and neon effects\n- **Committee Page Neon Effects**: Applied neon border effects and hover animations to all member cards matching Events page styling\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Routing**: Wouter (lightweight client-side routing)\n- **Styling**: Tailwind CSS with custom robotic theme variables\n- **UI Components**: Radix UI primitives with shadcn/ui component library\n- **State Management**: React hooks with TanStack Query for server state\n- **Build Tool**: Vite for fast development and optimized production builds\n- **3D Graphics**: Three.js for interactive robot animations\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js server\n- **Language**: TypeScript with ES modules\n- **Database ORM**: Drizzle ORM configured for PostgreSQL\n- **Database Provider**: Neon Database (serverless PostgreSQL)\n- **Session Storage**: In-memory storage with plans for PostgreSQL sessions\n- **API Design**: RESTful API with JSON responses\n\n### Key Components\n\n#### Frontend Components\n- **Pages**: Home, Events, Roboroarz, Registration, Contact, and 404 Not Found\n- **Layout**: Responsive navbar with mobile menu and footer\n- **Enhanced 3D Scenes**: \n  - Hero robot with PBR materials and bloom effects\n  - Assembly robot with moving components\n  - Gallery robots in modal viewers\n- **UI Elements**: Cards, forms, buttons, toasts, modals, and floating action buttons\n- **Interactive Components**: Robot Gallery with 3D previews, countdown timer, GSAP animations\n- **Performance**: Mobile-optimized 3D rendering with adaptive quality settings\n\n#### Backend Components\n- **Routes**: API endpoints for contact form submission and contact retrieval\n- **Storage**: Abstracted storage interface with in-memory implementation\n- **Validation**: Zod schema validation for data integrity\n- **Development**: Vite integration for hot reloading in development\n\n### Data Flow\n\n1. **Contact Form Submission**:\n   - User fills out contact form on frontend\n   - Form data validated using Zod schemas\n   - API request sent to `/api/contact` endpoint\n   - Backend validates and stores contact information\n   - Success/error response returned to frontend\n   - Toast notification displayed to user\n\n2. **Static Content Delivery**:\n   - Event information and registration details served statically\n   - Three.js assets loaded from CDN\n   - Responsive images and fonts optimized for performance\n\n### External Dependencies\n\n#### Frontend Dependencies\n- **UI Framework**: React, React DOM\n- **Routing**: Wouter\n- **Styling**: Tailwind CSS, PostCSS, Autoprefixer\n- **UI Components**: Radix UI primitives, shadcn/ui components\n- **State Management**: TanStack React Query\n- **Utilities**: clsx, class-variance-authority, date-fns\n- **3D Graphics**: Three.js (CDN), GSAP (CDN)\n- **Forms**: React Hook Form with resolvers\n\n#### Backend Dependencies\n- **Server**: Express.js\n- **Database**: Drizzle ORM, Neon Database serverless driver\n- **Validation**: Zod with Drizzle integration\n- **Session**: connect-pg-simple for future PostgreSQL sessions\n- **Development**: tsx for TypeScript execution, esbuild for building\n\n### Deployment Strategy\n\n#### Development\n- **Frontend**: Vite dev server with hot module replacement\n- **Backend**: tsx for TypeScript execution with nodemon-like behavior\n- **Database**: Drizzle migrations with push command for schema updates\n- **Environment**: NODE_ENV=development for development-specific features\n\n#### Production\n- **Frontend**: Static build output to `dist/public` directory\n- **Backend**: Bundled server code using esbuild to `dist/index.js`\n- **Database**: PostgreSQL with connection pooling via Neon\n- **Serving**: Express serves both API and static frontend files\n- **Environment**: NODE_ENV=production for optimized builds\n\n#### Configuration\n- **Database**: Configured via DATABASE_URL environment variable\n- **Schema**: Shared schema definitions between frontend and backend\n- **Build Process**: Separate build steps for frontend and backend with unified start command\n- **Assets**: CDN-hosted external libraries for better caching and performance\n\nThe application is designed for easy deployment on platforms like Replit, with environment-specific configurations and a unified build process that produces a single deployable artifact.","size_bytes":6536},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertContactSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Contact form submission\n  app.post(\"/api/contact\", async (req, res) => {\n    try {\n      const contactData = insertContactSchema.parse(req.body);\n      const contact = await storage.createContact(contactData);\n      \n      // In a real implementation, you would send an email here\n      // For now, we'll simulate email sending\n      console.log(\"Contact form submitted:\", contact);\n      console.log(\"Email would be sent to: isdlab@srmist.edu.in\");\n      \n      res.json({ success: true, message: \"Contact form submitted successfully\" });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ \n          success: false, \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      } else {\n        res.status(500).json({ \n          success: false, \n          message: \"Internal server error\" \n        });\n      }\n    }\n  });\n\n  // Get all contacts (for admin purposes)\n  app.get(\"/api/contacts\", async (req, res) => {\n    try {\n      const contacts = await storage.getContacts();\n      res.json(contacts);\n    } catch (error) {\n      res.status(500).json({ \n        success: false, \n        message: \"Failed to fetch contacts\" \n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":1568},"server/storage.ts":{"content":"import { type User, type InsertUser, type Contact, type InsertContact } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  createContact(contact: InsertContact): Promise<Contact>;\n  getContacts(): Promise<Contact[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private contacts: Map<string, Contact>;\n\n  constructor() {\n    this.users = new Map();\n    this.contacts = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async createContact(insertContact: InsertContact): Promise<Contact> {\n    const id = randomUUID();\n    const contact: Contact = { \n      ...insertContact, \n      id,\n      createdAt: new Date(),\n      institution: insertContact.institution || null\n    };\n    this.contacts.set(id, contact);\n    return contact;\n  }\n\n  async getContacts(): Promise<Contact[]> {\n    return Array.from(this.contacts.values());\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":1545},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const contacts = pgTable(\"contacts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  institution: text(\"institution\"),\n  message: text(\"message\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertContactSchema = createInsertSchema(contacts).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertContact = z.infer<typeof insertContactSchema>;\nexport type Contact = typeof contacts.$inferSelect;\n","size_bytes":1127},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport Events from \"@/pages/events\";\nimport About from \"@/pages/about\";\nimport Committee from \"@/pages/committee\";\nimport Registration from \"@/pages/registration\";\nimport Contact from \"@/pages/contact\";\nimport Roboroarz from \"@/pages/roboroarz\";\nimport Navbar from \"@/components/layout/navbar\";\nimport Footer from \"@/components/layout/footer\";\n\nfunction Router() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navbar />\n      <Switch>\n        <Route path=\"/\" component={Home} />\n        <Route path=\"/events\" component={Events} />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/committee\" component={Committee} />\n        <Route path=\"/roboroarz\" component={Roboroarz} />\n        <Route path=\"/registration\" component={Registration} />\n        <Route path=\"/contact\" component={Contact} />\n        <Route component={NotFound} />\n      </Switch>\n      <Footer />\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1481},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n  \n  /* Custom Robotic Theme Colors */\n  --electric-blue: hsl(195, 100%, 50%);\n  --neon-cyan: hsl(180, 100%, 50%);\n  --neon-green: hsl(120, 100%, 50%);\n  --electric-purple: hsl(271, 76%, 53%);\n  --tech-gray: hsl(0, 0%, 10%);\n  --deep-space: hsl(0, 0%, 4%);\n  --metallic: hsl(0, 0%, 75%);\n  --dark-steel: hsl(0, 0%, 16%);\n  --robot-glow-color: #00D4FF;\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', sans-serif;\n    background: linear-gradient(135deg, hsl(0, 0%, 4%) 0%, hsl(0, 0%, 10%) 50%, hsl(0, 0%, 16%) 100%);\n  }\n  \n  h1, h2, h3, h4, h5, h6 {\n    font-family: 'Orbitron', monospace;\n  }\n}\n\n@layer components {\n  .hero-gradient {\n    background: linear-gradient(135deg, hsl(0, 0%, 4%) 0%, hsl(0, 0%, 10%) 50%, hsl(0, 0%, 16%) 100%);\n  }\n  \n  .neon-text {\n    text-shadow: 0 0 10px hsl(180, 100%, 50%), 0 0 20px hsl(180, 100%, 50%), 0 0 30px hsl(180, 100%, 50%);\n  }\n  \n  .glow-border {\n    border: 2px solid transparent;\n    background: linear-gradient(45deg, hsl(195, 100%, 50%), hsl(271, 76%, 53%), hsl(120, 100%, 50%)) border-box;\n    -webkit-mask: linear-gradient(#fff 0 0) padding-box, linear-gradient(#fff 0 0);\n    -webkit-mask-composite: subtract;\n  }\n  \n  .card-hover {\n    transition: all 0.3s ease;\n  }\n  \n  .card-hover:hover {\n    transform: translateY(-10px) scale(1.02);\n    filter: drop-shadow(0 20px 40px rgba(0, 212, 255, 0.3));\n  }\n  \n  .three-container {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    z-index: 1;\n  }\n  \n  .content-overlay {\n    position: relative;\n    z-index: 2;\n  }\n}\n\n@layer utilities {\n  .animate-pulse-glow {\n    animation: pulse-glow 2s ease-in-out infinite alternate;\n  }\n  \n  .animate-rotate-gear {\n    animation: rotate-gear 4s linear infinite;\n  }\n  \n  .animate-float {\n    animation: float 3s ease-in-out infinite;\n  }\n  \n  .animate-scale-in {\n    animation: scale-in 0.6s cubic-bezier(0.175, 0.885, 0.32, 1.275);\n  }\n  \n  .animate-slide-up {\n    animation: slide-up 0.8s ease-out;\n  }\n  \n  .parallax {\n    transform: translateZ(0);\n    will-change: transform;\n  }\n  \n  .glass-morphism {\n    background: rgba(255, 255, 255, 0.05);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n  }\n  \n  .tech-border {\n    border-image: linear-gradient(45deg, hsl(195, 100%, 50%), hsl(271, 76%, 53%), hsl(120, 100%, 50%)) 1;\n  }\n  \n  .neon-border {\n    position: relative;\n    border: 2px solid transparent;\n    background: linear-gradient(var(--background), var(--background)) padding-box,\n                linear-gradient(45deg, hsl(195, 100%, 50%), hsl(271, 76%, 53%), hsl(120, 100%, 50%)) border-box;\n    border-radius: 12px;\n  }\n  \n  .neon-border::before {\n    content: '';\n    position: absolute;\n    inset: -2px;\n    padding: 2px;\n    background: linear-gradient(45deg, hsl(195, 100%, 50%), hsl(271, 76%, 53%), hsl(120, 100%, 50%));\n    border-radius: inherit;\n    mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);\n    mask-composite: subtract;\n    -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);\n    -webkit-mask-composite: destination-out;\n  }\n  \n  .neon-border:hover::before {\n    filter: drop-shadow(0 0 10px hsl(195, 100%, 50%)) drop-shadow(0 0 20px hsl(271, 76%, 53%));\n  }\n  \n  /* Hide scrollbars */\n  .scrollbar-hide {\n    -ms-overflow-style: none;  /* Internet Explorer 10+ */\n    scrollbar-width: none;  /* Firefox */\n  }\n  \n  .scrollbar-hide::-webkit-scrollbar { \n    display: none;  /* Safari and Chrome */\n  }\n}\n\n@keyframes pulse-glow {\n  0% { \n    filter: drop-shadow(0 0 5px hsl(180, 100%, 50%)) brightness(1); \n  }\n  100% { \n    filter: drop-shadow(0 0 25px hsl(180, 100%, 50%)) brightness(1.2); \n  }\n}\n\n@keyframes rotate-gear {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n@keyframes float {\n  0%, 100% { transform: translateY(0px); }\n  50% { transform: translateY(-10px); }\n}\n\n@keyframes scale-in {\n  0% { transform: scale(0.9); opacity: 0; }\n  100% { transform: scale(1); opacity: 1; }\n}\n\n@keyframes slide-up {\n  0% { transform: translateY(30px); opacity: 0; }\n  100% { transform: translateY(0); opacity: 1; }\n}\n\n@keyframes ripple {\n  0% { transform: scale(0); opacity: 1; }\n  100% { transform: scale(4); opacity: 0; }\n}\n\n/* Mobile optimizations */\n@media (max-width: 768px) {\n  .three-container {\n    height: 60vh !important;\n  }\n  \n  .card-hover:hover {\n    transform: translateY(-5px) scale(1.01);\n  }\n  \n  .neon-text {\n    text-shadow: 0 0 5px hsl(180, 100%, 50%), 0 0 10px hsl(180, 100%, 50%);\n  }\n}\n\n/* Three.js Container Styles */\n.three-container {\n  width: 100%;\n  height: 100%;\n  position: relative;\n  overflow: hidden;\n}\n\n.three-container canvas {\n  width: 100% !important;\n  height: 100% !important;\n  display: block;\n  outline: none;\n}\n\n/* Neon border effects for modals and buttons */\n.neon-border {\n  box-shadow: 0 0 5px var(--robot-glow-color), 0 0 10px var(--robot-glow-color), 0 0 15px var(--robot-glow-color);\n}\n\n.neon-border:hover {\n  box-shadow: 0 0 10px var(--robot-glow-color), 0 0 20px var(--robot-glow-color), 0 0 30px var(--robot-glow-color);\n}\n\n/* High-performance animations for mobile */\n@media (prefers-reduced-motion: reduce) {\n  .animate-pulse-glow,\n  .animate-rotate-gear,\n  .animate-float {\n    animation: none;\n  }\n}\n","size_bytes":6898},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/about.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport srmLogo from \"@/assets/srm-logo.webp\";\nimport ctechLogo from \"@/assets/ctech-logo.png\";\n\nexport default function About() {\n  return (\n    <div className=\"min-h-screen pt-20 px-4\">\n      {/* Hero Section */}\n      <section className=\"py-20 text-center\">\n        <div className=\"max-w-4xl mx-auto\">\n          <h1 className=\"font-bold text-5xl md:text-7xl mb-6 bg-gradient-to-r from-primary via-cyan-400 to-primary bg-clip-text text-transparent\">\n            About ROBOFEST 2025\n          </h1>\n          <p className=\"text-xl md:text-2xl text-muted-foreground mb-8\">\n            Battle of Smart Racers\n          </p>\n          <p className=\"text-lg text-cyan-300 max-w-3xl mx-auto leading-relaxed\">\n            Discover the organizations and institutions behind one of the most exciting robotics competitions in the region\n          </p>\n        </div>\n      </section>\n\n      {/* University & Department Logos */}\n      <section className=\"py-20\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-12 items-center\">\n            <Card className=\"bg-card/50 border-primary/30 card-hover\">\n              <CardContent className=\"p-8 text-center\">\n                <img \n                  src={srmLogo} \n                  alt=\"SRM Institute Logo\" \n                  className=\"h-24 mx-auto mb-6\"\n                />\n                <h3 className=\"text-2xl font-bold text-primary mb-4\">\n                  SRM Institute of Science & Technology\n                </h3>\n                <p className=\"text-muted-foreground leading-relaxed\">\n                  One of India's leading private technical universities, consistently ranked among the top institutions for engineering and technology education.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-card/50 border-primary/30 card-hover\">\n              <CardContent className=\"p-8 text-center\">\n                <img \n                  src={ctechLogo} \n                  alt=\"CTech Department Logo\" \n                  className=\"h-24 mx-auto mb-6\"\n                />\n                <h3 className=\"text-2xl font-bold text-primary mb-4\">\n                  Department of Computing Technologies\n                </h3>\n                <p className=\"text-muted-foreground leading-relaxed\">\n                  Accelerating intellectual innovation through cutting-edge research and development in computing technologies and robotics.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Club Section */}\n      <section className=\"py-20 bg-gradient-to-r from-card to-background\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"font-bold text-4xl md:text-5xl mb-6 text-primary\">\n              Host Club\n            </h2>\n          </div>\n          \n          <Card className=\"bg-card/50 border-primary/30 card-hover mb-8\">\n            <CardHeader className=\"text-center\">\n              <div className=\"mb-6\">\n                <img \n                  src=\"https://isdlabsrm.in/logo.svg\" \n                  alt=\"ISD Lab Logo\" \n                  className=\"h-14 mx-auto\"\n                />\n              </div>\n              <CardTitle className=\"text-3xl text-primary\">\n                Intelligent Systems Design Lab (ISD Lab)\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"text-center\">\n              <p className=\"text-lg text-muted-foreground leading-relaxed mb-6\">\n                The Intelligent Systems Design Lab at SRM Institute is dedicated to advancing research and \n                education in robotics, artificial intelligence, and intelligent systems. Our lab serves as \n                the hub for innovative robotics projects and competitions, fostering creativity and technical \n                excellence among students.\n              </p>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 text-sm\">\n                <div className=\"flex flex-col items-center space-y-2\">\n                  <div className=\"w-12 h-12 bg-primary/20 rounded-full flex items-center justify-center\">\n                    <span className=\"text-primary font-bold\">R&D</span>\n                  </div>\n                  <span className=\"text-muted-foreground\">Research & Development</span>\n                </div>\n                <div className=\"flex flex-col items-center space-y-2\">\n                  <div className=\"w-12 h-12 bg-cyan-400/20 rounded-full flex items-center justify-center\">\n                    <span className=\"text-cyan-400 font-bold\">AI</span>\n                  </div>\n                  <span className=\"text-muted-foreground\">Artificial Intelligence</span>\n                </div>\n                <div className=\"flex flex-col items-center space-y-2\">\n                  <div className=\"w-12 h-12 bg-green-400/20 rounded-full flex items-center justify-center\">\n                    <span className=\"text-green-400 font-bold\">🤖</span>\n                  </div>\n                  <span className=\"text-muted-foreground\">Robotics Innovation</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n\n      {/* Sponsors Section */}\n      <section className=\"py-20 bg-gradient-to-r from-background to-card\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"font-bold text-4xl md:text-5xl mb-6 text-primary\">\n              Our Sponsors\n            </h2>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {/* Platinum Sponsor */}\n            <Card className=\"bg-card/50 border-2 border-yellow-400/50 card-hover relative overflow-hidden\">\n              <div className=\"absolute top-0 left-0 right-0 h-1 bg-gradient-to-r from-yellow-400 to-yellow-600\"></div>\n              <CardHeader className=\"text-center\">\n                <CardTitle className=\"text-xl text-yellow-400 mb-4\">\n                  Platinum Sponsor\n                </CardTitle>\n                <div className=\"w-32 h-32 bg-gradient-to-br from-yellow-400/20 to-yellow-600/20 rounded-xl flex items-center justify-center mx-auto mb-4 border-2 border-yellow-400/30\">\n                  <span className=\"text-yellow-400 text-sm\">Logo Coming Soon</span>\n                </div>\n              </CardHeader>\n              <CardContent className=\"text-center\">\n                <p className=\"text-muted-foreground text-sm\">\n                  Premium partnership opportunity with maximum visibility and exclusive benefits.\n                </p>\n              </CardContent>\n            </Card>\n\n            {/* Gold Sponsor */}\n            <Card className=\"bg-card/50 border-2 border-orange-400/50 card-hover relative overflow-hidden\">\n              <div className=\"absolute top-0 left-0 right-0 h-1 bg-gradient-to-r from-orange-400 to-orange-600\"></div>\n              <CardHeader className=\"text-center\">\n                <CardTitle className=\"text-xl text-orange-400 mb-4\">\n                  Gold Sponsor\n                </CardTitle>\n                <div className=\"w-32 h-32 bg-gradient-to-br from-orange-400/20 to-orange-600/20 rounded-xl flex items-center justify-center mx-auto mb-4 border-2 border-orange-400/30\">\n                  <span className=\"text-orange-400 text-sm\">Logo Coming Soon</span>\n                </div>\n              </CardHeader>\n              <CardContent className=\"text-center\">\n                <p className=\"text-muted-foreground text-sm\">\n                  Significant partnership with prominent branding and engagement opportunities.\n                </p>\n              </CardContent>\n            </Card>\n\n            {/* Silver Sponsor */}\n            <Card className=\"bg-card/50 border-2 border-gray-400/50 card-hover relative overflow-hidden\">\n              <div className=\"absolute top-0 left-0 right-0 h-1 bg-gradient-to-r from-gray-400 to-gray-600\"></div>\n              <CardHeader className=\"text-center\">\n                <CardTitle className=\"text-xl text-gray-400 mb-4\">\n                  Silver Sponsor\n                </CardTitle>\n                <div className=\"w-32 h-32 bg-gradient-to-br from-gray-400/20 to-gray-600/20 rounded-xl flex items-center justify-center mx-auto mb-4 border-2 border-gray-400/30\">\n                  <span className=\"text-gray-400 text-sm\">Logo Coming Soon</span>\n                </div>\n              </CardHeader>\n              <CardContent className=\"text-center\">\n                <p className=\"text-muted-foreground text-sm\">\n                  Strategic partnership with valuable exposure and networking benefits.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n\n    </div>\n  );\n}","size_bytes":8996},"client/src/pages/contact.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Mail, Phone, MapPin, User } from \"lucide-react\";\n\nexport default function Contact() {\n  const { toast } = useToast();\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    institution: \"\",\n    message: \"\"\n  });\n\n  const contactMutation = useMutation({\n    mutationFn: (data: typeof formData) => \n      apiRequest(\"POST\", \"/api/contact\", data),\n    onSuccess: () => {\n      toast({\n        title: \"Message Sent Successfully!\",\n        description: \"We'll get back to you within 24 hours.\",\n      });\n      setFormData({ name: \"\", email: \"\", institution: \"\", message: \"\" });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error Sending Message\",\n        description: error.message || \"Please try again later.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    contactMutation.mutate(formData);\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const contactInfo = [\n    {\n      icon: <User className=\"w-5 h-5\" />,\n      title: \"Faculty SPOC\",\n      details: [\n        \"Dr. Vidhyalakshmi M K\",\n        \"vidhyalm1@srmist.edu.in\",\n        \"+91 94432 23066\"\n      ],\n      color: \"text-primary\"\n    },\n    {\n      icon: <Mail className=\"w-5 h-5\" />,\n      title: \"Student SPOCs\",\n      details: [\n        \"Harshil Malhotra - hm3673@srmist.edu.in\",\n        \"+91 62309 31075\",\n        \"Harsh Arora - +91 93725 85511\"\n      ],\n      color: \"text-green-400\"\n    },\n    {\n      icon: <MapPin className=\"w-5 h-5\" />,\n      title: \"Event Location\",\n      details: [\n        \"<span className='text-primary font-semibold'>SRM Institute of Science and Technology</span>\",\n        \"Kattankulathur, Tamil Nadu 603203\",\n        \"India\"\n      ],\n      color: \"text-purple-400\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen pt-20\">\n      {/* Contact Hero */}\n      <section className=\"py-20 px-4 bg-gradient-to-t from-card to-background\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"font-bold text-4xl md:text-5xl mb-6 text-primary\">\n              GET IN TOUCH\n            </h1>\n            <p className=\"text-xl text-muted-foreground\">\n              Have questions? We're here to help you navigate your robotics journey\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n            {/* Contact Information */}\n            <div className=\"space-y-8\">\n              <div>\n                <h2 className=\"font-bold text-2xl mb-6 text-cyan-400\">Contact Information</h2>\n                \n                <div className=\"space-y-6\">\n                  {contactInfo.map((info, index) => (\n                    <Card key={index} className={`bg-card/50 border border-primary/30`}>\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex items-start space-x-3\">\n                          <div className={`w-10 h-10 rounded-lg flex items-center justify-center bg-gradient-to-r from-primary to-cyan-400 text-black`}>\n                            {info.icon}\n                          </div>\n                          <div>\n                            <h3 className={`font-semibold text-lg mb-2 ${info.color}`}>\n                              {info.title}\n                            </h3>\n                            {info.details.map((detail, idx) => (\n                              <p key={idx} className={idx === 0 ? \"font-semibold\" : \"text-muted-foreground\"}>\n                                {detail}\n                              </p>\n                            ))}\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n            </div>\n            \n            {/* Contact Form */}\n            <div>\n              <Card className=\"bg-card border-primary/30\">\n                <CardHeader>\n                  <CardTitle className=\"text-2xl text-cyan-400\">Send us a Message</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <form onSubmit={handleSubmit} className=\"space-y-6\">\n                    <div>\n                      <Label htmlFor=\"name\" className=\"text-sm font-medium text-muted-foreground mb-2\">\n                        Full Name *\n                      </Label>\n                      <Input\n                        id=\"name\"\n                        name=\"name\"\n                        type=\"text\"\n                        value={formData.name}\n                        onChange={handleInputChange}\n                        className=\"bg-background border-primary/30 focus:border-primary\"\n                        placeholder=\"Enter your full name\"\n                        required\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"email\" className=\"text-sm font-medium text-muted-foreground mb-2\">\n                        Email Address *\n                      </Label>\n                      <Input\n                        id=\"email\"\n                        name=\"email\"\n                        type=\"email\"\n                        value={formData.email}\n                        onChange={handleInputChange}\n                        className=\"bg-background border-primary/30 focus:border-primary\"\n                        placeholder=\"Enter your email\"\n                        required\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"institution\" className=\"text-sm font-medium text-muted-foreground mb-2\">\n                        Institution\n                      </Label>\n                      <Input\n                        id=\"institution\"\n                        name=\"institution\"\n                        type=\"text\"\n                        value={formData.institution}\n                        onChange={handleInputChange}\n                        className=\"bg-background border-primary/30 focus:border-primary\"\n                        placeholder=\"Enter your school/college name\"\n                      />\n                    </div>\n                    \n                    <div>\n                      <Label htmlFor=\"message\" className=\"text-sm font-medium text-muted-foreground mb-2\">\n                        Message *\n                      </Label>\n                      <Textarea\n                        id=\"message\"\n                        name=\"message\"\n                        value={formData.message}\n                        onChange={handleInputChange}\n                        className=\"bg-background border-primary/30 focus:border-primary resize-none min-h-32\"\n                        placeholder=\"Tell us about your questions or interest in ROBOFEST...\"\n                        required\n                      />\n                    </div>\n                    \n                    <Button \n                      type=\"submit\" \n                      disabled={contactMutation.isPending}\n                      className=\"w-full bg-gradient-to-r from-primary to-cyan-400 text-black font-semibold text-lg hover:scale-105 transition-transform py-3\"\n                    >\n                      {contactMutation.isPending ? \"Sending...\" : \"Send Message\"}\n                    </Button>\n                  </form>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":8215},"client/src/pages/events.tsx":{"content":"import EventCard from \"@/components/ui/event-card\";\nimport EventModal from \"@/components/ui/event-modal\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Events() {\n  const events = [\n    {\n      title: \"ROBO WAR\",\n      prize: \"₹1,50,000\",\n      entryFee: \"₹1,500\",\n      venue: \"Sports Hanger\",\n      icon: <span className=\"text-2xl\">⚔️</span>,\n      description: \"Ultimate combat robotics competition where machines battle for supremacy\",\n      borderColor: \"border-red-500/30\",\n      titleColor: \"text-red-400\"\n    },\n    {\n      title: \"ROBO SOCCER\",\n      prize: \"₹40,000\",\n      entryFee: \"₹500\",\n      teamSize: \"3-5 Members\",\n      icon: <span className=\"text-2xl\">⚽</span>,\n      description: \"Autonomous robots compete in strategic soccer matches\",\n      borderColor: \"border-green-500/30\",\n      titleColor: \"text-green-400\"\n    },\n    {\n      title: \"ROBO SUMO\",\n      prize: \"₹25,000\",\n      entryFee: \"₹300\",\n      venue: \"1.5m Diameter Ring\",\n      icon: <span className=\"text-2xl\">🥋</span>,\n      description: \"Traditional sumo wrestling adapted for autonomous robots\",\n      borderColor: \"border-purple-500/30\",\n      titleColor: \"text-purple-400\"\n    },\n    {\n      title: \"LINE FOLLOWER\",\n      prize: \"₹15,000\",\n      entryFee: \"₹200\",\n      venue: \"Complex Path Track\",\n      icon: <span className=\"text-2xl\">〰️</span>,\n      description: \"Precision navigation challenge following complex paths\",\n      borderColor: \"border-cyan-500/30\",\n      titleColor: \"text-cyan-400\"\n    },\n    {\n      title: \"OBSTACLE RACE\",\n      prize: \"₹20,000\",\n      entryFee: \"₹300\",\n      venue: \"Multi-level Course\",\n      icon: <span className=\"text-2xl\">🚧</span>,\n      description: \"Navigate through complex obstacle courses autonomously\",\n      borderColor: \"border-yellow-500/30\",\n      titleColor: \"text-yellow-400\"\n    },\n    {\n      title: \"DRONE RACE\",\n      prize: \"₹50,000\",\n      entryFee: \"₹400\",\n      venue: \"5 Minutes Flight\",\n      icon: <span className=\"text-2xl\">🚁</span>,\n      description: \"High-speed aerial racing with autonomous navigation\",\n      borderColor: \"border-pink-500/30\",\n      titleColor: \"text-pink-400\"\n    }\n  ];\n\n  const faqItems = [\n    {\n      question: \"Who can participate in ROBOFEST 2025?\",\n      answer: \"Senior high school and college students can participate. Teams must have 3-5 members and at least one team member should bring a laptop for programming.\"\n    },\n    {\n      question: \"Is there a registration fee?\",\n      answer: \"Registration varies by event. Entry fees range from ₹200 to ₹1,500 depending on the competition category you choose to participate in.\"\n    },\n    {\n      question: \"Are robots provided by the organizers?\",\n      answer: \"Yes, for specific events like the Battle of Smart Racers, standardized robots (Smorphi platforms) are provided by the organizing committee at no additional cost.\"\n    },\n    {\n      question: \"What will teams need to do during the competition?\",\n      answer: \"Teams will program robots to complete various challenges including autonomous racing, line following, obstacle navigation, and combat scenarios depending on their chosen events.\"\n    },\n    {\n      question: \"Is accommodation provided?\",\n      answer: \"Accommodation is not provided by the organizing committee. Participants need to arrange their own lodging, though we can provide recommendations for nearby hotels.\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen pt-20\">\n      {/* Events Section */}\n      <section className=\"py-20 px-4 bg-gradient-to-b from-background to-card\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center mb-16\">\n            <h1 className=\"font-bold text-4xl md:text-6xl mb-6 text-primary\">\n              COMPETITION EVENTS\n            </h1>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n              Join the ultimate robotics competition featuring 6 thrilling events with prizes up to ₹1,50,000\n            </p>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {events.map((event, index) => (\n              <EventCard key={index} {...event} />\n            ))}\n          </div>\n\n          <div className=\"text-center mt-12\">\n            <Link href=\"/registration\">\n              <Button size=\"lg\" className=\"bg-gradient-to-r from-primary to-cyan-400 text-black font-semibold text-lg hover:scale-105 transition-transform px-8 py-4\">\n                Register for Events\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* FAQ Section */}\n      <section className=\"py-20 px-4 bg-background\">\n        <div className=\"max-w-4xl mx-auto\">\n          <h2 className=\"font-bold text-4xl md:text-5xl text-center mb-12 text-primary\">\n            FREQUENTLY ASKED QUESTIONS\n          </h2>\n          \n          <div className=\"space-y-4\">\n            {faqItems.map((item, index) => (\n              <Card key={index} className=\"bg-card border border-primary/30\">\n                <CardContent className=\"p-6\">\n                  <h3 className=\"font-semibold text-lg mb-3 text-primary\">\n                    {item.question}\n                  </h3>\n                  <p className=\"text-muted-foreground\">\n                    {item.answer}\n                  </p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":5635},"client/src/pages/home.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport CountdownTimer from \"@/components/ui/countdown-timer\";\nimport HeroRobotScene from \"@/components/three/hero-robot-scene\";\nimport FeatureScene from \"@/components/three/feature-scene\";\nimport { useEffect, useRef } from \"react\";\n\ndeclare global {\n  interface Window {\n    ScrollTrigger: any;\n    gsap: any;\n  }\n}\n\nexport default function Home() {\n  useEffect(() => {\n    // Initialize GSAP ScrollTrigger animations\n    if (window.gsap && window.ScrollTrigger) {\n      window.gsap.registerPlugin(window.ScrollTrigger);\n      \n      // Animate sections on scroll\n      window.gsap.fromTo('.animate-on-scroll', \n        { opacity: 0, y: 100 },\n        { \n          opacity: 1, \n          y: 0, \n          duration: 1,\n          stagger: 0.2,\n          scrollTrigger: {\n            trigger: '.animate-on-scroll',\n            start: 'top 80%',\n            end: 'bottom 20%',\n            toggleActions: 'play none none reverse'\n          }\n        }\n      );\n    }\n  }, []);\n\n  return (\n    <div className=\"min-h-screen\">\n      {/* Hero Section */}\n      <section className=\"relative min-h-screen hero-gradient overflow-hidden\">\n        <HeroRobotScene className=\"absolute inset-0\" />\n        \n        <div className=\"content-overlay flex items-center justify-center min-h-screen px-4 pt-20\">\n          <div className=\"text-center max-w-6xl mx-auto\">\n            <div className=\"mb-8\">\n              <h1 className=\"font-black text-4xl md:text-7xl lg:text-8xl mb-4 bg-gradient-to-r from-primary via-cyan-400 to-primary bg-clip-text text-transparent\">\n                ROBOFEST\n                <span className=\"block text-primary\">2025</span>\n              </h1>\n              <p className=\"text-xl md:text-3xl font-light text-muted-foreground mb-2\">\n                BATTLE OF SMART RACERS\n              </p>\n              <p className=\"text-lg md:text-xl text-muted-foreground\">\n                September 10-12, 2025 | <span className=\"text-primary font-semibold\">SRM Institute of Science & Technology</span>\n              </p>\n            </div>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center mb-12\">\n              <Link href=\"/registration\">\n                <Button size=\"lg\" className=\"bg-gradient-to-r from-primary to-cyan-400 text-black font-semibold text-lg hover:scale-105 transition-transform px-8 py-4\">\n                  Register Now\n                </Button>\n              </Link>\n\n            </div>\n            \n            <CountdownTimer />\n          </div>\n        </div>\n        \n        {/* Floating Elements */}\n        <div className=\"absolute bottom-10 left-10 w-20 h-20 border-2 border-green-400/30 rounded-full animate-pulse hidden lg:block\"></div>\n        <div className=\"absolute top-20 right-20 w-16 h-16 border-2 border-purple-400/30 rounded-lg animate-float hidden lg:block\"></div>\n      </section>\n\n      {/* About Section */}\n      <section className=\"py-20 px-4 bg-gradient-to-r from-card to-background animate-on-scroll\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n            <div>\n              <h2 className=\"font-bold text-4xl md:text-5xl mb-6 text-primary\">\n                ABOUT ROBOFEST\n              </h2>\n              <p className=\"text-lg text-muted-foreground mb-6\">\n                ROBOFEST 2025 is one of the biggest and most prestigious robotics competitions hosted by SRM Institute of Science and Technology. Our mission is to foster creativity, innovation, and collaboration among the next generation of robotics engineers.\n              </p>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-3 h-3 bg-green-400 rounded-full animate-pulse\"></div>\n                  <span>Open to senior high school and college students</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-3 h-3 bg-primary rounded-full animate-pulse\"></div>\n                  <span>Teams of 3-5 members encouraged</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-3 h-3 bg-purple-400 rounded-full animate-pulse\"></div>\n                  <span>Cutting-edge robotics platforms provided</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-3 h-3 bg-cyan-400 rounded-full animate-pulse\"></div>\n                  <span>Industry expert judges and mentors</span>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"relative\">\n              <img \n                src=\"https://images.unsplash.com/photo-1485827404703-89b55fcc595e?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\" \n                alt=\"Robotics laboratory with students\" \n                className=\"rounded-xl shadow-2xl w-full h-auto\" \n              />\n              \n              <div className=\"absolute -bottom-6 -right-6 bg-gradient-to-r from-primary to-cyan-400 p-6 rounded-xl\">\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-black\">500+</div>\n                  <div className=\"text-sm text-black font-semibold\">Participants Expected</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n\n    </div>\n  );\n}\n","size_bytes":5587},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/registration.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ExternalLink, Calendar, MapPin, Users, Trophy } from \"lucide-react\";\n\nexport default function Registration() {\n  const handleRegistration = () => {\n    window.open(\"https://stag.registrations.isdlabsrm.in\", \"_blank\");\n  };\n\n  const eventHighlights = [\n    {\n      icon: <Trophy className=\"w-6 h-6\" />,\n      title: \"6 Competition Events\",\n      description: \"Choose from Robo War, Soccer, Sumo, Line Follower, Obstacle Race, and Drone Race\"\n    },\n    {\n      icon: <Calendar className=\"w-6 h-6\" />,\n      title: \"3-Day Event\",\n      description: \"September 10-12, 2025 - Three days of intense robotics competition\"\n    },\n    {\n      icon: <MapPin className=\"w-6 h-6\" />,\n      title: \"SRM Institute\",\n      description: \"Kattankulathur, Tamil Nadu - Premier engineering institute\"\n    },\n    {\n      icon: <Users className=\"w-6 h-6\" />,\n      title: \"Team Competition\",\n      description: \"3-5 members per team - Collaborate and innovate together\"\n    }\n  ];\n\n  const prizes = [\n    { event: \"Robo War\", prize: \"₹1,50,000\", color: \"text-red-400\" },\n    { event: \"Drone Race\", prize: \"₹50,000\", color: \"text-pink-400\" },\n    { event: \"Robo Soccer\", prize: \"₹40,000\", color: \"text-green-400\" },\n    { event: \"Robo Sumo\", prize: \"₹25,000\", color: \"text-purple-400\" },\n    { event: \"Obstacle Race\", prize: \"₹20,000\", color: \"text-yellow-400\" },\n    { event: \"Line Follower\", prize: \"₹15,000\", color: \"text-cyan-400\" }\n  ];\n\n  return (\n    <div className=\"min-h-screen pt-20 overflow-x-hidden\">\n      {/* Registration Hero */}\n      <section className=\"py-12 sm:py-20 px-4 bg-gradient-to-br from-background to-card\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <h1 className=\"font-bold text-3xl sm:text-4xl md:text-6xl mb-4 sm:mb-6 text-primary\">\n            REGISTER NOW\n          </h1>\n          <p className=\"text-lg sm:text-xl text-muted-foreground mb-6 sm:mb-8 max-w-2xl mx-auto px-2\">\n            Join ROBOFEST 2025 and compete with the best robotics teams from across the country. Registration is now open!\n          </p>\n          \n          <Card className=\"bg-gradient-to-r from-primary/10 to-cyan-400/10 border-primary/30 mb-6 sm:mb-8 mx-2 sm:mx-0\">\n            <CardContent className=\"p-4 sm:p-6 md:p-8\">\n              <div className=\"flex flex-col md:flex-row items-center justify-between gap-4 sm:gap-6\">\n                <div className=\"text-center md:text-left\">\n                  <h3 className=\"font-bold text-xl sm:text-2xl mb-2\">Ready to compete?</h3>\n                  <p className=\"text-muted-foreground text-sm sm:text-base\">\n                    Click below to access the official registration portal\n                  </p>\n                </div>\n                <Button \n                  onClick={handleRegistration}\n                  size=\"lg\"\n                  className=\"bg-gradient-to-r from-primary to-cyan-400 text-black font-semibold text-base sm:text-lg hover:scale-105 transition-transform px-6 sm:px-8 py-3 sm:py-4 w-full sm:w-auto\"\n                >\n                  <ExternalLink className=\"w-4 h-4 sm:w-5 sm:h-5 mr-2\" />\n                  Register Now\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n\n      {/* Event Highlights */}\n      <section className=\"py-12 sm:py-20 px-4 bg-background\">\n        <div className=\"max-w-6xl mx-auto\">\n          <h2 className=\"font-bold text-2xl sm:text-3xl md:text-4xl text-center mb-8 sm:mb-12 text-primary\">\n            Why Join ROBOFEST 2025?\n          </h2>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 sm:gap-6 md:gap-8 mb-12 sm:mb-16\">\n            {eventHighlights.map((highlight, index) => (\n              <Card key={index} className=\"bg-card border-primary/30 card-hover\">\n                <CardContent className=\"p-4 sm:p-6\">\n                  <div className=\"flex items-start space-x-3 sm:space-x-4\">\n                    <div className=\"w-10 h-10 sm:w-12 sm:h-12 bg-gradient-to-r from-primary to-cyan-400 rounded-lg flex items-center justify-center text-black flex-shrink-0\">\n                      {highlight.icon}\n                    </div>\n                    <div className=\"min-w-0\">\n                      <h3 className=\"font-bold text-lg sm:text-xl mb-2\">{highlight.title}</h3>\n                      <p className=\"text-muted-foreground text-sm sm:text-base\">{highlight.description}</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {/* Prize Pool */}\n          <Card className=\"bg-gradient-to-r from-card to-muted/20 border-primary/30\">\n            <CardHeader>\n              <CardTitle className=\"text-center text-xl sm:text-2xl md:text-3xl text-primary\">\n                Total Prize Pool: ₹3,00,000+\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-4 sm:p-6\">\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-3 sm:gap-4\">\n                {prizes.map((prize, index) => (\n                  <div key={index} className=\"text-center p-3 sm:p-4 bg-background/50 rounded-lg\">\n                    <h4 className=\"font-semibold mb-1 text-sm sm:text-base\">{prize.event}</h4>\n                    <p className={`font-bold text-base sm:text-lg ${prize.color}`}>{prize.prize}</p>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n\n      {/* Registration Details */}\n      <section className=\"py-12 sm:py-20 px-4 bg-gradient-to-t from-card to-background\">\n        <div className=\"max-w-4xl mx-auto\">\n          <h2 className=\"font-bold text-2xl sm:text-3xl md:text-4xl text-center mb-8 sm:mb-12 text-primary\">\n            Registration Details\n          </h2>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 sm:gap-6 md:gap-8\">\n            <Card className=\"bg-card border-primary/30\">\n              <CardHeader className=\"pb-3 sm:pb-6\">\n                <CardTitle className=\"text-primary text-lg sm:text-xl\">Eligibility</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2 sm:space-y-3 pt-0\">\n                <p className=\"text-sm sm:text-base\">• Senior high school students</p>\n                <p className=\"text-sm sm:text-base\">• College students (all years)</p>\n                <p className=\"text-sm sm:text-base\">• Teams of 3-5 members</p>\n                <p className=\"text-sm sm:text-base\">• At least one laptop per team</p>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"bg-card border-primary/30\">\n              <CardHeader className=\"pb-3 sm:pb-6\">\n                <CardTitle className=\"text-primary text-lg sm:text-xl\">Important Dates</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2 sm:space-y-3 pt-0\">\n                <p className=\"text-sm sm:text-base\">• Registration Opens: Now</p>\n                <p className=\"text-sm sm:text-base\">• Early Bird Deadline: August 15, 2025</p>\n                <p className=\"text-sm sm:text-base\">• Final Registration: August 31, 2025</p>\n                <p className=\"text-sm sm:text-base\">• Event Dates: September 10-12, 2025</p>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"bg-card border-primary/30\">\n              <CardHeader className=\"pb-3 sm:pb-6\">\n                <CardTitle className=\"text-primary text-lg sm:text-xl\">What's Included</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2 sm:space-y-3 pt-0\">\n                <p className=\"text-sm sm:text-base\">• Competition entry</p>\n                <p className=\"text-sm sm:text-base\">• Robot platforms (where applicable)</p>\n                <p className=\"text-sm sm:text-base\">• Technical support</p>\n                <p className=\"text-sm sm:text-base\">• Certificate of participation</p>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"bg-card border-primary/30\">\n              <CardHeader className=\"pb-3 sm:pb-6\">\n                <CardTitle className=\"text-primary text-lg sm:text-xl\">Contact Support</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2 sm:space-y-3 pt-0\">\n                <p className=\"text-sm sm:text-base break-all\">• Email: isdlab@srmist.edu.in</p>\n                <p className=\"text-sm sm:text-base\">• Phone: +91 94432 23066</p>\n                <p className=\"text-sm sm:text-base\">• Student SPOC: +91 62309 31075</p>\n                <p className=\"text-sm sm:text-base\">• Registration support available</p>\n              </CardContent>\n            </Card>\n          </div>\n          \n          <div className=\"text-center mt-8 sm:mt-12 px-4\">\n            <Button \n              onClick={handleRegistration}\n              size=\"lg\"\n              className=\"bg-gradient-to-r from-primary to-cyan-400 text-black font-semibold text-lg sm:text-xl hover:scale-105 transition-transform px-8 sm:px-12 py-4 sm:py-6 w-full sm:w-auto\"\n            >\n              <ExternalLink className=\"w-5 h-5 sm:w-6 sm:h-6 mr-2\" />\n              Start Registration Process\n            </Button>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":9525},"client/src/pages/roboroarz.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport EnhancedRobotScene from \"@/components/three/enhanced-robot-scene\";\nimport FloatingActionButton from \"@/components/ui/floating-action-button\";\nimport { Calendar, MapPin, Users, Trophy, Mail, Phone, ExternalLink } from \"lucide-react\";\nimport { SiInstagram } from \"react-icons/si\";\n\nexport default function Roboroarz() {\n  const videoCards = [\n    {\n      title: \"Introducing Smorphi\",\n      description: \"Watch how Smorphi robots can be configured for different movement patterns.\",\n      videoId: \"cOHIRPZTXrw\",\n      embedUrl: \"https://www.youtube.com/embed/cOHIRPZTXrw\",\n      placeholder: true,\n      imageUrl: \"https://images.unsplash.com/photo-1485827404703-89b55fcc595e?w=600&h=400&fit=crop\"\n    },\n    {\n      title: \"RoboroarZ Singapore 2025\",\n      description: \"Placeholder for future video (use static image or empty video frame).\",\n      videoId: \"placeholder\",\n      embedUrl: null,\n      placeholder: true,\n      imageUrl: \"https://images.unsplash.com/photo-1518709268805-4e9042af2176?w=600&h=400&fit=crop\"\n    },\n    {\n      title: \"Example of Competition Format\",\n      description: \"Showcases passion, teamwork, and excitement from a real RoboRoarZ competition.\",\n      videoId: \"OkzNq6RLPEc\",\n      embedUrl: \"https://www.youtube.com/embed/OkzNq6RLPEc\"\n    }\n  ];\n\n  const eventDetails = [\n    { icon: <Calendar className=\"w-5 h-5\" />, label: \"Date\", value: \"10-12 September 2025\" },\n    { icon: <MapPin className=\"w-5 h-5\" />, label: \"Venue\", value: \"TP2, 7th Floor\" },\n    { icon: <Trophy className=\"w-5 h-5\" />, label: \"Perks\", value: \"Placement offer and internship @ Singapore\" },\n    { icon: <Users className=\"w-5 h-5\" />, label: \"Fee\", value: \"Fee na 😉\" }\n  ];\n\n  const spocs = [\n    {\n      type: \"Faculty SPOC\",\n      name: \"Dr. Vidhyalakshmi M K Ma'am\",\n      email: \"vidhyalm1@srmist.edu.in\",\n      phone: \"+91 94432 23066\",\n      color: \"text-primary\"\n    },\n    {\n      type: \"Student SPOCs\",\n      name: \"Harshil Malhotra\",\n      email: \"hm3673@srmist.edu.in\",\n      phone: \"6230931075\",\n      color: \"text-green-400\"\n    },\n    {\n      type: \"Student SPOC\",\n      name: \"Harsh Arora\",\n      email: undefined,\n      phone: \"+91 93725 85511\",\n      color: \"text-cyan-400\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen pt-20\">\n      {/* Hero Section */}\n      <section className=\"relative min-h-screen hero-gradient overflow-hidden\">\n        <EnhancedRobotScene \n          sceneType=\"hero\"\n          enableBloom={true}\n          enableOrbitControls={false}\n          autoRotate={true}\n          className=\"absolute inset-0\"\n        />\n        \n        <div className=\"content-overlay flex items-center justify-center min-h-screen px-4\">\n          <div className=\"text-center max-w-6xl mx-auto\">\n            <h1 className=\"font-black text-4xl md:text-7xl lg:text-8xl mb-6\">\n              ROBOROARZ\n              <span className=\"block text-primary text-3xl md:text-5xl lg:text-6xl mt-2\">\n                SRM UNIVERSITY, 2025\n              </span>\n            </h1>\n            <p className=\"text-2xl md:text-4xl font-bold text-cyan-400 mb-8\">\n              BATTLE OF SMART RACERS\n            </p>\n            <p className=\"text-lg md:text-xl text-muted-foreground mb-8\">\n              The ultimate autonomous racing competition where innovation meets precision\n            </p>\n          </div>\n        </div>\n      </section>\n\n      {/* Event Details Section */}\n      <section className=\"py-20 px-4 bg-gradient-to-r from-background to-card\">\n        <div className=\"max-w-6xl mx-auto\">\n          <Card className=\"bg-gradient-to-br from-card/80 to-background/60 border-primary/30 backdrop-blur-md\">\n            <CardHeader>\n              <CardTitle className=\"text-3xl md:text-4xl text-center text-primary\">\n                EVENT DETAILS\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-8\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 mb-8\">\n                {eventDetails.map((detail, index) => (\n                  <div key={index} className=\"flex items-center space-x-4 p-4 bg-background/50 rounded-lg border border-primary/20\">\n                    <div className=\"w-12 h-12 bg-gradient-to-r from-primary to-cyan-400 rounded-lg flex items-center justify-center text-black\">\n                      {detail.icon}\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">{detail.label}</p>\n                      <p className=\"font-semibold text-lg\">{detail.value}</p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              <div className=\"bg-background/30 rounded-xl p-6 border border-primary/20\">\n                <h3 className=\"font-bold text-xl mb-4 text-cyan-400\">Main Challenge</h3>\n                <p className=\"text-muted-foreground text-lg leading-relaxed\">\n                  Teams must program and control their robot to race autonomously, follow lines, navigate tracks, and overcome technical obstacles. \n                  This competition tests your skills in robotics programming, AI navigation, and real-time decision making.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n\n      {/* Standard Robot Platform Section */}\n      <section className=\"py-20 px-4 bg-gradient-to-l from-card to-background\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"font-bold text-4xl md:text-5xl mb-6 text-primary\">\n              STANDARD ROBOT PLATFORM\n            </h2>\n            <p className=\"text-xl text-muted-foreground\">\n              Explore the cutting-edge robotics technology powering our competition\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            {videoCards.map((video, index) => (\n              <Card key={index} className=\"bg-card/50 border-primary/30 card-hover overflow-hidden\">\n                <div className=\"relative h-64 bg-background/20\">\n                  {video.placeholder ? (\n                    <div className=\"w-full h-full bg-gradient-to-br from-primary/20 to-cyan-400/20 flex items-center justify-center\">\n                      <img \n                        src={video.imageUrl || \"https://images.unsplash.com/photo-1518709268805-4e9042af2176?w=600&h=400&fit=crop\"}\n                        alt={`${video.title} - Robotics Competition Thumbnail`}\n                        className=\"w-full h-full object-cover\"\n                      />\n                    </div>\n                  ) : (\n                    <iframe\n                      src={video.embedUrl || \"\"}\n                      title={video.title}\n                      className=\"w-full h-full\"\n                      frameBorder=\"0\"\n                      allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                      allowFullScreen\n                    />\n                  )}\n                </div>\n                <CardContent className=\"p-6\">\n                  <h3 className=\"font-bold text-xl mb-3 text-foreground\">\n                    {video.title}\n                  </h3>\n                  <p className=\"text-muted-foreground text-sm\">\n                    {video.description}\n                  </p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n\n\n      {/* SPOCs Section */}\n      <section className=\"py-20 px-4 bg-gradient-to-t from-card to-background\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"font-bold text-4xl md:text-5xl mb-6 text-primary\">\n              SINGLE POINT OF CONTACTS\n            </h2>\n            <p className=\"text-xl text-muted-foreground\">\n              Get in touch with our dedicated team for any queries\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {spocs.map((spoc, index) => (\n              <Card key={index} className=\"bg-card/50 border-primary/30 card-hover\">\n                <CardContent className=\"p-6\">\n                  <div className=\"text-center\">\n                    <div className=\"w-16 h-16 bg-gradient-to-r from-primary to-cyan-400 rounded-full flex items-center justify-center mx-auto mb-4\">\n                      <Users className=\"w-8 h-8 text-black\" />\n                    </div>\n                    <h3 className={`font-bold text-lg mb-2 ${spoc.color}`}>\n                      {spoc.type}\n                    </h3>\n                    <h4 className=\"font-semibold text-xl mb-4\">\n                      {spoc.name}\n                    </h4>\n                    <div className=\"space-y-2\">\n                      {spoc.email && (\n                        <div className=\"flex items-center justify-center space-x-2 text-muted-foreground\">\n                          <Mail className=\"w-4 h-4\" />\n                          <a href={`mailto:${spoc.email}`} className=\"hover:text-primary transition-colors\">\n                            {spoc.email}\n                          </a>\n                        </div>\n                      )}\n                      <div className=\"flex items-center justify-center space-x-2 text-muted-foreground\">\n                        <Phone className=\"w-4 h-4\" />\n                        <a href={`tel:${spoc.phone}`} className=\"hover:text-primary transition-colors\">\n                          {spoc.phone}\n                        </a>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n\n\n      {/* Floating Action Button */}\n      <FloatingActionButton \n        href=\"https://docs.google.com/forms/d/e/1FAIpQLSfeKZJQsO0JBYT3W29fj1FxiqhtxY6Zlb0hvKmdrpj_4mohNA/viewform?usp=header\"\n        text=\"Register Now 🚀\"\n      />\n    </div>\n  );\n}","size_bytes":10181},"client/src/components/layout/footer.tsx":{"content":"import { Link } from \"wouter\";\nimport { Instagram, ExternalLink } from \"lucide-react\";\nimport roboFestLogo from \"@/assets/robofest-logo.png\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-background border-t border-primary/30 py-12 px-4\">\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          <div className=\"col-span-1 md:col-span-2\">\n            <div className=\"flex items-center space-x-2 mb-4\">\n              <img \n                src={roboFestLogo} \n                alt=\"ROBOFEST Logo\" \n                className=\"h-12 w-12 object-contain\"\n              />\n              <span className=\"font-bold text-2xl\">ROBOFEST 2025</span>\n            </div>\n            <p className=\"text-muted-foreground mb-4\">\n              The premier robotics competition fostering innovation, creativity, and collaboration among the next generation of engineers and technologists.\n            </p>\n            <p className=\"text-sm text-muted-foreground\">\n              © 2025 ROBOFEST. Organized by <span className=\"text-primary font-semibold\">SRM Institute of Science and Technology</span>. All rights reserved.\n            </p>\n          </div>\n          \n          <div>\n            <h4 className=\"font-bold text-lg mb-4 text-primary\">Quick Links</h4>\n            <ul className=\"space-y-2 text-muted-foreground\">\n              <li><Link href=\"/\" className=\"hover:text-foreground transition-colors\">Home</Link></li>\n              <li><Link href=\"/events\" className=\"hover:text-foreground transition-colors\">Events</Link></li>\n              <li><Link href=\"/contact\" className=\"hover:text-foreground transition-colors\">Contact</Link></li>\n            </ul>\n          </div>\n          \n          <div>\n            <h4 className=\"font-bold text-lg mb-4 text-primary\">Connect</h4>\n            <div className=\"space-y-3\">\n              <a href=\"mailto:isdlab@srmist.edu.in\" className=\"block text-muted-foreground hover:text-foreground transition-colors\">\n                isdlab@srmist.edu.in\n              </a>\n              <a \n                href=\"https://www.instagram.com/robofest_srmist/\" \n                target=\"_blank\" \n                rel=\"noopener noreferrer\" \n                className=\"flex items-center space-x-2 text-pink-500 hover:text-pink-400 transition-colors group\"\n              >\n                <Instagram className=\"w-5 h-5\" />\n                <span className=\"relative\">\n                  @robofest_srmist\n                  <div className=\"absolute -inset-1 bg-gradient-to-r from-pink-500 to-pink-400 rounded-md opacity-0 group-hover:opacity-30 transition-opacity blur\"></div>\n                </span>\n                <ExternalLink className=\"w-4 h-4\" />\n              </a>\n              <a \n                href=\"https://stag.registrations.isdlabsrm.in\" \n                target=\"_blank\" \n                rel=\"noopener noreferrer\" \n                className=\"inline-block bg-gradient-to-r from-primary to-cyan-400 px-4 py-2 rounded text-black font-semibold text-sm hover:scale-105 transition-transform\"\n              >\n                Register Now\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":3248},"client/src/components/layout/navbar.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { Menu } from \"lucide-react\";\nimport roboFestLogo from \"@/assets/robofest-logo.png\";\n\nexport default function Navbar() {\n  const [location] = useLocation();\n  const [isOpen, setIsOpen] = useState(false);\n\n  const isActive = (path: string) => {\n    if (path === \"/\" && location === \"/\") return true;\n    if (path !== \"/\" && location.startsWith(path)) return true;\n    return false;\n  };\n\n  const navItems = [\n    { path: \"/\", label: \"Home\" },\n    { path: \"/events\", label: \"Events\" },\n    { path: \"/roboroarz\", label: \"Roboroarz\" },\n    { path: \"/about\", label: \"About\" },\n    { path: \"/committee\", label: \"Committee\" },\n    { path: \"/contact\", label: \"Contact\" },\n  ];\n\n  return (\n    <nav className=\"fixed top-0 w-full z-50 bg-background/90 backdrop-blur-md border-b border-primary/30\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center py-4\">\n          <Link href=\"/\" className=\"flex items-center space-x-2\">\n            <img \n              src={roboFestLogo} \n              alt=\"ROBOFEST Logo\" \n              className=\"w-10 h-10 object-contain\"\n            />\n            <span className=\"font-bold text-xl\">ROBOFEST</span>\n          </Link>\n          \n          {/* Desktop Navigation */}\n          <div className=\"hidden md:flex space-x-8\">\n            {navItems.map((item) => (\n              <Link\n                key={item.path}\n                href={item.path}\n                className={`transition-colors ${\n                  isActive(item.path)\n                    ? \"text-primary\"\n                    : \"text-foreground hover:text-primary\"\n                }`}\n              >\n                {item.label}\n              </Link>\n            ))}\n          </div>\n          \n          <div className=\"hidden md:block\">\n            <Link href=\"/registration\">\n              <Button className=\"bg-gradient-to-r from-primary to-cyan-400 text-black font-semibold hover:scale-105 transition-transform\">\n                Register Now\n              </Button>\n            </Link>\n          </div>\n          \n          {/* Mobile Navigation */}\n          <Sheet open={isOpen} onOpenChange={setIsOpen}>\n            <SheetTrigger asChild className=\"md:hidden\">\n              <Button variant=\"ghost\" size=\"icon\">\n                <Menu className=\"h-6 w-6\" />\n              </Button>\n            </SheetTrigger>\n            <SheetContent side=\"right\" className=\"w-[300px] bg-background\">\n              <div className=\"flex flex-col space-y-4 mt-8\">\n                {navItems.map((item) => (\n                  <Link\n                    key={item.path}\n                    href={item.path}\n                    onClick={() => setIsOpen(false)}\n                    className={`text-lg transition-colors ${\n                      isActive(item.path)\n                        ? \"text-primary\"\n                        : \"text-foreground hover:text-primary\"\n                    }`}\n                  >\n                    {item.label}\n                  </Link>\n                ))}\n                <Link href=\"/registration\" onClick={() => setIsOpen(false)}>\n                  <Button className=\"w-full bg-gradient-to-r from-primary to-cyan-400 text-black font-semibold\">\n                    Register Now\n                  </Button>\n                </Link>\n              </div>\n            </SheetContent>\n          </Sheet>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":3634},"client/src/components/three/enhanced-robot-scene.tsx":{"content":"import { useEffect, useRef } from \"react\";\n\ndeclare global {\n  interface Window {\n    THREE: any;\n    gsap: any;\n  }\n}\n\ninterface EnhancedRobotSceneProps {\n  sceneType?: 'hero' | 'assembly' | 'gallery';\n  enableBloom?: boolean;\n  enableOrbitControls?: boolean;\n  autoRotate?: boolean;\n  className?: string;\n}\n\nexport default function EnhancedRobotScene({ \n  sceneType = 'hero',\n  enableBloom = true,\n  enableOrbitControls = true,\n  autoRotate = true,\n  className = \"\"\n}: EnhancedRobotSceneProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const sceneRef = useRef<any>(null);\n  const rendererRef = useRef<any>(null);\n  const robotRef = useRef<any>(null);\n  const animationIdRef = useRef<number>(0);\n  const composerRef = useRef<any>(null);\n  const controlsRef = useRef<any>(null);\n\n  useEffect(() => {\n    if (!containerRef.current || !window.THREE) return;\n\n    const THREE = window.THREE;\n    const container = containerRef.current;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({ \n      alpha: true, \n      antialias: true,\n      powerPreference: \"high-performance\"\n    });\n    \n    renderer.setSize(container.clientWidth, container.clientHeight);\n    renderer.setClearColor(0x000000, 0);\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n    renderer.outputColorSpace = THREE.SRGBColorSpace;\n    renderer.toneMapping = THREE.ACESFilmicToneMapping;\n    renderer.toneMappingExposure = 1;\n    container.appendChild(renderer.domElement);\n\n    // Enhanced lighting setup\n    const ambientLight = new THREE.AmbientLight(0x404040, 0.3);\n    scene.add(ambientLight);\n\n    const mainLight = new THREE.DirectionalLight(0x00D4FF, 1);\n    mainLight.position.set(10, 10, 5);\n    mainLight.castShadow = true;\n    mainLight.shadow.mapSize.width = 2048;\n    mainLight.shadow.mapSize.height = 2048;\n    scene.add(mainLight);\n\n    const fillLight = new THREE.PointLight(0x1ECBFF, 0.8, 50);\n    fillLight.position.set(-10, 5, 10);\n    scene.add(fillLight);\n\n    const accentLight = new THREE.SpotLight(0x00FFFF, 1, 30, Math.PI / 6, 0.5);\n    accentLight.position.set(0, 15, 0);\n    accentLight.target.position.set(0, 0, 0);\n    scene.add(accentLight);\n    scene.add(accentLight.target);\n\n    // Create enhanced robot based on scene type\n    let robot: any;\n    if (sceneType === 'hero') {\n      robot = createHeroRobot(THREE);\n    } else if (sceneType === 'assembly') {\n      robot = createAssemblyRobot(THREE);\n    } else {\n      robot = createGalleryRobot(THREE);\n    }\n\n    scene.add(robot);\n\n    // Enhanced particle system\n    const particleSystem = createParticleSystem(THREE, sceneType);\n    scene.add(particleSystem);\n\n    // Camera positioning based on scene type\n    if (sceneType === 'hero') {\n      camera.position.set(0, 5, 15);\n    } else if (sceneType === 'assembly') {\n      camera.position.set(8, 8, 8);\n    } else {\n      camera.position.set(0, 0, 10);\n    }\n\n    // Orbit controls\n    let controls: any = null;\n    if (enableOrbitControls && window.THREE.OrbitControls) {\n      controls = new window.THREE.OrbitControls(camera, renderer.domElement);\n      controls.enableDamping = true;\n      controls.dampingFactor = 0.05;\n      controls.autoRotate = autoRotate;\n      controls.autoRotateSpeed = 1;\n      controls.enableZoom = false;\n      controls.enablePan = false;\n      controls.maxPolarAngle = Math.PI / 2;\n      controls.minPolarAngle = Math.PI / 4;\n    }\n\n    // Post-processing for bloom effect\n    let composer: any = null;\n    if (enableBloom && window.THREE.EffectComposer) {\n      composer = new window.THREE.EffectComposer(renderer);\n      const renderPass = new window.THREE.RenderPass(scene, camera);\n      composer.addPass(renderPass);\n\n      const bloomPass = new window.THREE.UnrealBloomPass(\n        new THREE.Vector2(container.clientWidth, container.clientHeight),\n        0.5, // strength\n        0.4, // radius\n        0.85 // threshold\n      );\n      composer.addPass(bloomPass);\n    }\n\n    // Mouse interaction for non-orbit scenes\n    let mouseX = 0;\n    let mouseY = 0;\n    const handleMouseMove = (event: MouseEvent) => {\n      if (!enableOrbitControls) {\n        mouseX = (event.clientX - window.innerWidth / 2) * 0.001;\n        mouseY = (event.clientY - window.innerHeight / 2) * 0.001;\n      }\n    };\n\n    document.addEventListener('mousemove', handleMouseMove);\n\n    // Animation loop\n    const animate = () => {\n      animationIdRef.current = requestAnimationFrame(animate);\n\n      // Update controls\n      if (controls) {\n        controls.update();\n      }\n\n      // Robot animations based on scene type\n      if (sceneType === 'hero') {\n        animateHeroRobot(robot, mouseX, mouseY, !enableOrbitControls);\n      } else if (sceneType === 'assembly') {\n        animateAssemblyRobot(robot);\n      } else {\n        animateGalleryRobot(robot);\n      }\n\n      // Particle animations\n      animateParticles(particleSystem, sceneType);\n\n      // Render\n      if (composer) {\n        composer.render();\n      } else {\n        renderer.render(scene, camera);\n      }\n    };\n\n    animate();\n\n    // Handle resize\n    const handleResize = () => {\n      if (!container) return;\n      const width = container.clientWidth;\n      const height = container.clientHeight;\n      \n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderer.setSize(width, height);\n      \n      if (composer) {\n        composer.setSize(width, height);\n      }\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    // Store references\n    sceneRef.current = scene;\n    rendererRef.current = renderer;\n    robotRef.current = robot;\n    composerRef.current = composer;\n    controlsRef.current = controls;\n\n    // Cleanup\n    return () => {\n      document.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('resize', handleResize);\n      if (animationIdRef.current) {\n        cancelAnimationFrame(animationIdRef.current);\n      }\n      if (container && renderer.domElement) {\n        container.removeChild(renderer.domElement);\n      }\n      if (controls) {\n        controls.dispose();\n      }\n      renderer.dispose();\n    };\n  }, [sceneType, enableBloom, enableOrbitControls, autoRotate]);\n\n  return <div ref={containerRef} className={`three-container ${className}`} />;\n}\n\n// Helper functions for creating different robot types\nfunction createHeroRobot(THREE: any) {\n  const robot = new THREE.Group();\n\n  // Main body with PBR materials\n  const bodyGeometry = new THREE.BoxGeometry(2, 3, 1.5);\n  const bodyMaterial = new THREE.MeshPhysicalMaterial({\n    color: 0x2A2A2A,\n    metalness: 0.7,\n    roughness: 0.2,\n    emissive: 0x001133,\n    emissiveIntensity: 0.1\n  });\n  const body = new THREE.Mesh(bodyGeometry, bodyMaterial);\n  body.castShadow = true;\n  body.receiveShadow = true;\n  robot.add(body);\n\n  // Glowing head\n  const headGeometry = new THREE.BoxGeometry(1.5, 1.5, 1.2);\n  const headMaterial = new THREE.MeshPhysicalMaterial({\n    color: 0x00D4FF,\n    metalness: 0.8,\n    roughness: 0.1,\n    emissive: 0x00D4FF,\n    emissiveIntensity: 0.3\n  });\n  const head = new THREE.Mesh(headGeometry, headMaterial);\n  head.position.y = 2.2;\n  head.castShadow = true;\n  robot.add(head);\n\n  // Arms with joints\n  for (let side = -1; side <= 1; side += 2) {\n    const armGroup = new THREE.Group();\n    \n    const shoulderGeometry = new THREE.SphereGeometry(0.3);\n    const shoulderMaterial = new THREE.MeshPhysicalMaterial({\n      color: 0x00FFFF,\n      metalness: 1,\n      roughness: 0,\n      emissive: 0x00FFFF,\n      emissiveIntensity: 0.2\n    });\n    const shoulder = new THREE.Mesh(shoulderGeometry, shoulderMaterial);\n    shoulder.position.set(side * 1.5, 1, 0);\n    \n    const armGeometry = new THREE.BoxGeometry(0.5, 2, 0.5);\n    const armMaterial = new THREE.MeshPhysicalMaterial({\n      color: 0xC0C0C0,\n      metalness: 0.9,\n      roughness: 0.1\n    });\n    const arm = new THREE.Mesh(armGeometry, armMaterial);\n    arm.position.set(side * 1.5, -0.5, 0);\n    arm.castShadow = true;\n    \n    armGroup.add(shoulder);\n    armGroup.add(arm);\n    robot.add(armGroup);\n  }\n\n  // Glowing eyes\n  const eyeGeometry = new THREE.SphereGeometry(0.1, 8, 6);\n  const eyeMaterial = new THREE.MeshPhongMaterial({\n    color: 0x00FFFF,\n    emissive: 0x00FFFF,\n    emissiveIntensity: 1\n  });\n\n  const leftEye = new THREE.Mesh(eyeGeometry, eyeMaterial);\n  leftEye.position.set(-0.3, 2.3, 0.6);\n  robot.add(leftEye);\n\n  const rightEye = new THREE.Mesh(eyeGeometry, eyeMaterial);\n  rightEye.position.set(0.3, 2.3, 0.6);\n  robot.add(rightEye);\n\n  return robot;\n}\n\nfunction createAssemblyRobot(THREE: any) {\n  const robot = new THREE.Group();\n\n  // Create multiple connected components\n  const components = [\n    { size: [1, 1, 1], pos: [0, 0, 0], color: 0x00D4FF },\n    { size: [0.8, 2, 0.8], pos: [0, 1.5, 0], color: 0x1ECBFF },\n    { size: [1.5, 0.5, 1.5], pos: [0, -1, 0], color: 0x00FFFF },\n  ];\n\n  components.forEach((comp, index) => {\n    const geometry = new THREE.BoxGeometry(...comp.size);\n    const material = new THREE.MeshPhysicalMaterial({\n      color: comp.color,\n      metalness: 0.8,\n      roughness: 0.2,\n      emissive: comp.color,\n      emissiveIntensity: 0.1\n    });\n    const mesh = new THREE.Mesh(geometry, material);\n    mesh.position.set(...comp.pos);\n    mesh.userData = { componentIndex: index };\n    robot.add(mesh);\n  });\n\n  return robot;\n}\n\nfunction createGalleryRobot(THREE: any) {\n  const robot = new THREE.Group();\n\n  // Simplified robot for gallery view\n  const bodyGeometry = new THREE.CylinderGeometry(0.8, 1, 2);\n  const bodyMaterial = new THREE.MeshPhysicalMaterial({\n    color: 0x444444,\n    metalness: 0.6,\n    roughness: 0.3\n  });\n  const body = new THREE.Mesh(bodyGeometry, bodyMaterial);\n  robot.add(body);\n\n  return robot;\n}\n\nfunction createParticleSystem(THREE: any, sceneType: string) {\n  const particleGeometry = new THREE.BufferGeometry();\n  const particleCount = sceneType === 'hero' ? 200 : 100;\n  const positions = new Float32Array(particleCount * 3);\n  const velocities = new Float32Array(particleCount * 3);\n\n  for (let i = 0; i < particleCount * 3; i += 3) {\n    positions[i] = (Math.random() - 0.5) * 50;\n    positions[i + 1] = (Math.random() - 0.5) * 50;\n    positions[i + 2] = (Math.random() - 0.5) * 50;\n    \n    velocities[i] = (Math.random() - 0.5) * 0.01;\n    velocities[i + 1] = (Math.random() - 0.5) * 0.01;\n    velocities[i + 2] = (Math.random() - 0.5) * 0.01;\n  }\n\n  particleGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n  particleGeometry.setAttribute('velocity', new THREE.BufferAttribute(velocities, 3));\n\n  const particleMaterial = new THREE.PointsMaterial({\n    color: 0x00D4FF,\n    size: 0.1,\n    transparent: true,\n    opacity: 0.6,\n    blending: THREE.AdditiveBlending\n  });\n\n  return new THREE.Points(particleGeometry, particleMaterial);\n}\n\n// Animation functions\nfunction animateHeroRobot(robot: any, mouseX: number, mouseY: number, enableMouseTracking: boolean) {\n  robot.rotation.y += 0.005;\n  robot.position.y = Math.sin(Date.now() * 0.001) * 0.3;\n  \n  if (enableMouseTracking) {\n    robot.rotation.x = mouseY * 0.3;\n    robot.rotation.z = mouseX * 0.3;\n  }\n  \n  // Animate arms\n  robot.children.forEach((child: any, index: number) => {\n    if (index >= 2 && index <= 3) { // Arms\n      child.rotation.z = Math.sin(Date.now() * 0.002 + index) * 0.3;\n    }\n  });\n}\n\nfunction animateAssemblyRobot(robot: any) {\n  robot.children.forEach((child: any) => {\n    if (child.userData.componentIndex !== undefined) {\n      const index = child.userData.componentIndex;\n      child.rotation.y += 0.01 * (index + 1);\n      child.position.y += Math.sin(Date.now() * 0.001 + index) * 0.02;\n    }\n  });\n}\n\nfunction animateGalleryRobot(robot: any) {\n  robot.rotation.y += 0.01;\n  robot.rotation.x = Math.sin(Date.now() * 0.001) * 0.1;\n}\n\nfunction animateParticles(particleSystem: any, sceneType: string) {\n  const positions = particleSystem.geometry.attributes.position.array;\n  const velocities = particleSystem.geometry.attributes.velocity.array;\n\n  for (let i = 0; i < positions.length; i += 3) {\n    positions[i] += velocities[i];\n    positions[i + 1] += velocities[i + 1];\n    positions[i + 2] += velocities[i + 2];\n\n    // Reset particles that go too far\n    if (Math.abs(positions[i]) > 25) velocities[i] *= -1;\n    if (Math.abs(positions[i + 1]) > 25) velocities[i + 1] *= -1;\n    if (Math.abs(positions[i + 2]) > 25) velocities[i + 2] *= -1;\n  }\n\n  particleSystem.geometry.attributes.position.needsUpdate = true;\n  particleSystem.rotation.y += 0.001;\n}","size_bytes":12736},"client/src/components/three/feature-scene.tsx":{"content":"import { useEffect, useRef, useCallback } from \"react\";\n\ndeclare global {\n  interface Window {\n    THREE: any;\n  }\n}\n\ninterface FeatureSceneProps {\n  className?: string;\n}\n\nexport default function FeatureScene({ className = \"\" }: FeatureSceneProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const sceneRef = useRef<any>(null);\n  const rendererRef = useRef<any>(null);\n  const robotArmRef = useRef<any>(null);\n  const animationIdRef = useRef<number>(0);\n  const composerRef = useRef<any>(null);\n  const isInitializedRef = useRef(false);\n  const observerRef = useRef<IntersectionObserver | null>(null);\n\n  const initializeScene = useCallback(() => {\n    if (!containerRef.current || !window.THREE || isInitializedRef.current) return;\n\n    const THREE = window.THREE;\n    const container = containerRef.current;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({ \n      alpha: true, \n      antialias: true,\n      powerPreference: \"high-performance\"\n    });\n    \n    renderer.setSize(container.clientWidth, container.clientHeight);\n    renderer.setClearColor(0x000000, 0);\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n    renderer.outputColorSpace = THREE.SRGBColorSpace;\n    renderer.toneMapping = THREE.ACESFilmicToneMapping;\n    renderer.toneMappingExposure = 1.2;\n    container.appendChild(renderer.domElement);\n\n    // Lighting setup\n    const ambientLight = new THREE.AmbientLight(0x404040, 0.4);\n    scene.add(ambientLight);\n\n    const mainLight = new THREE.DirectionalLight(0xFFFFFF, 1.2);\n    mainLight.position.set(15, 15, 10);\n    mainLight.castShadow = true;\n    mainLight.shadow.mapSize.width = 2048;\n    mainLight.shadow.mapSize.height = 2048;\n    scene.add(mainLight);\n\n    const accentLight = new THREE.PointLight(0x00D4FF, 0.8, 30);\n    accentLight.position.set(-10, 10, 5);\n    scene.add(accentLight);\n\n    // Create robotic arm assembly\n    const robotArm = createRoboticArm(THREE);\n    scene.add(robotArm);\n\n    // Create assembly components\n    const assemblyParts = createAssemblyParts(THREE);\n    scene.add(assemblyParts);\n\n    // Camera positioning\n    camera.position.set(12, 8, 12);\n    camera.lookAt(0, 0, 0);\n\n    // Post-processing for bloom effect\n    let composer: any = null;\n    if (window.THREE.EffectComposer && window.THREE.RenderPass && window.THREE.UnrealBloomPass) {\n      composer = new window.THREE.EffectComposer(renderer);\n      const renderPass = new window.THREE.RenderPass(scene, camera);\n      composer.addPass(renderPass);\n\n      const bloomPass = new window.THREE.UnrealBloomPass(\n        new THREE.Vector2(container.clientWidth, container.clientHeight),\n        0.3, // strength\n        0.3, // radius\n        0.8 // threshold\n      );\n      composer.addPass(bloomPass);\n    }\n\n    // Animation loop\n    const animate = () => {\n      if (!isInitializedRef.current) return;\n      animationIdRef.current = requestAnimationFrame(animate);\n\n      const time = Date.now() * 0.001;\n\n      // Robotic arm animation\n      if (robotArm) {\n        // Base rotation\n        robotArm.rotation.y = Math.sin(time * 0.3) * 0.5;\n        \n        // Animate arm segments\n        robotArm.children.forEach((segment: any, index: number) => {\n          if (segment.userData && segment.userData.isSegment) {\n            const phase = index * 0.5;\n            segment.rotation.z = Math.sin(time * 0.5 + phase) * 0.3;\n            segment.rotation.x = Math.cos(time * 0.3 + phase) * 0.2;\n          }\n        });\n\n        // Animate end effector\n        const endEffector = robotArm.children.find((child: any) => child.userData?.isEndEffector);\n        if (endEffector) {\n          endEffector.rotation.y = time * 2;\n          \n          // Picking up parts animation\n          const pickupCycle = Math.sin(time * 0.8) * 0.5 + 0.5;\n          endEffector.children.forEach((child: any) => {\n            if (child.userData?.isGripper) {\n              child.rotation.z = pickupCycle * 0.5;\n            }\n          });\n        }\n      }\n\n      // Assembly parts animation\n      if (assemblyParts) {\n        assemblyParts.children.forEach((part: any, index: number) => {\n          if (part.userData && part.userData.isPart) {\n            const phase = index * 0.8;\n            part.position.y = Math.sin(time * 0.6 + phase) * 0.2 + part.userData.originalY;\n            part.rotation.y += 0.01;\n          }\n        });\n      }\n\n      // Render\n      if (composer) {\n        composer.render();\n      } else {\n        renderer.render(scene, camera);\n      }\n    };\n\n    animate();\n\n    // Handle resize\n    const handleResize = () => {\n      if (!container) return;\n      const width = container.clientWidth;\n      const height = container.clientHeight;\n      \n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderer.setSize(width, height);\n      \n      if (composer) {\n        composer.setSize(width, height);\n      }\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    // Store references\n    sceneRef.current = scene;\n    rendererRef.current = renderer;\n    robotArmRef.current = robotArm;\n    composerRef.current = composer;\n    isInitializedRef.current = true;\n\n    // Cleanup function\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (animationIdRef.current) {\n        cancelAnimationFrame(animationIdRef.current);\n      }\n      if (container && renderer.domElement) {\n        container.removeChild(renderer.domElement);\n      }\n      renderer.dispose();\n      isInitializedRef.current = false;\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    // Intersection observer for lazy initialization\n    observerRef.current = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting && !isInitializedRef.current) {\n          initializeScene();\n        }\n      },\n      { threshold: 0.1 }\n    );\n\n    observerRef.current.observe(containerRef.current);\n\n    return () => {\n      if (observerRef.current) {\n        observerRef.current.disconnect();\n      }\n      if (animationIdRef.current) {\n        cancelAnimationFrame(animationIdRef.current);\n      }\n      if (rendererRef.current) {\n        rendererRef.current.dispose();\n      }\n      isInitializedRef.current = false;\n    };\n  }, [initializeScene]);\n\n  return <div ref={containerRef} className={`three-container ${className}`} />;\n}\n\n// Helper function for creating robotic arm\nfunction createRoboticArm(THREE: any) {\n  const armGroup = new THREE.Group();\n\n  // Base\n  const baseGeometry = new THREE.CylinderGeometry(1.5, 2, 1, 12);\n  const baseMaterial = new THREE.MeshPhysicalMaterial({\n    color: 0x2A2A2A,\n    metalness: 0.8,\n    roughness: 0.2\n  });\n  const base = new THREE.Mesh(baseGeometry, baseMaterial);\n  base.castShadow = true;\n  base.receiveShadow = true;\n  armGroup.add(base);\n\n  // Arm segments\n  const segmentColors = [0x00D4FF, 0x1ECBFF, 0x00FFFF];\n  let currentY = 0.5;\n  \n  for (let i = 0; i < 3; i++) {\n    const segmentGroup = new THREE.Group();\n    segmentGroup.userData = { isSegment: true };\n    \n    // Joint\n    const jointGeometry = new THREE.SphereGeometry(0.5);\n    const jointMaterial = new THREE.MeshPhysicalMaterial({\n      color: segmentColors[i],\n      metalness: 1,\n      roughness: 0.1,\n      emissive: segmentColors[i],\n      emissiveIntensity: 0.1\n    });\n    const joint = new THREE.Mesh(jointGeometry, jointMaterial);\n    joint.position.y = currentY;\n    joint.castShadow = true;\n    \n    // Arm segment\n    const armGeometry = new THREE.BoxGeometry(0.6, 3, 0.6);\n    const armMaterial = new THREE.MeshPhysicalMaterial({\n      color: 0xC0C0C0,\n      metalness: 0.9,\n      roughness: 0.1\n    });\n    const armSegment = new THREE.Mesh(armGeometry, armMaterial);\n    armSegment.position.y = currentY + 1.5;\n    armSegment.castShadow = true;\n    \n    segmentGroup.add(joint);\n    segmentGroup.add(armSegment);\n    segmentGroup.position.y = currentY;\n    \n    armGroup.add(segmentGroup);\n    currentY += 3;\n  }\n\n  // End effector with grippers\n  const endEffectorGroup = new THREE.Group();\n  endEffectorGroup.userData = { isEndEffector: true };\n  \n  const gripperGeometry = new THREE.BoxGeometry(0.3, 1, 0.1);\n  const gripperMaterial = new THREE.MeshPhysicalMaterial({\n    color: 0xFF6B35,\n    metalness: 0.7,\n    roughness: 0.3,\n    emissive: 0xFF6B35,\n    emissiveIntensity: 0.1\n  });\n  \n  for (let side = -1; side <= 1; side += 2) {\n    const gripper = new THREE.Mesh(gripperGeometry, gripperMaterial);\n    gripper.position.set(side * 0.3, 0, 0);\n    gripper.userData = { isGripper: true };\n    gripper.castShadow = true;\n    endEffectorGroup.add(gripper);\n  }\n  \n  endEffectorGroup.position.y = currentY;\n  armGroup.add(endEffectorGroup);\n\n  return armGroup;\n}\n\nfunction createAssemblyParts(THREE: any) {\n  const partsGroup = new THREE.Group();\n  \n  const partGeometries = [\n    new THREE.BoxGeometry(1, 0.5, 1),\n    new THREE.CylinderGeometry(0.3, 0.3, 1),\n    new THREE.SphereGeometry(0.4),\n    new THREE.TorusGeometry(0.5, 0.2)\n  ];\n  \n  const partColors = [0xFF6B35, 0x00D4FF, 0x1ECBFF, 0x00FFFF];\n  \n  for (let i = 0; i < 4; i++) {\n    const partMaterial = new THREE.MeshPhysicalMaterial({\n      color: partColors[i],\n      metalness: 0.6,\n      roughness: 0.4,\n      emissive: partColors[i],\n      emissiveIntensity: 0.05\n    });\n    \n    const part = new THREE.Mesh(partGeometries[i], partMaterial);\n    part.position.set(\n      (Math.random() - 0.5) * 8,\n      Math.random() * 2 + 1,\n      (Math.random() - 0.5) * 8\n    );\n    part.castShadow = true;\n    part.userData = { \n      isPart: true, \n      originalY: part.position.y \n    };\n    \n    partsGroup.add(part);\n  }\n  \n  return partsGroup;\n}","size_bytes":9878},"client/src/components/three/hero-robot-scene.tsx":{"content":"import { useEffect, useRef } from \"react\";\n\ndeclare global {\n  interface Window {\n    THREE: any;\n  }\n}\n\ninterface HeroRobotSceneProps {\n  className?: string;\n}\n\nexport default function HeroRobotScene({ className = \"\" }: HeroRobotSceneProps) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const sceneRef = useRef<any>(null);\n  const rendererRef = useRef<any>(null);\n  const robotRef = useRef<any>(null);\n  const animationIdRef = useRef<number>(0);\n  const composerRef = useRef<any>(null);\n  const controlsRef = useRef<any>(null);\n\n  useEffect(() => {\n    if (!containerRef.current || !window.THREE) return;\n\n    const THREE = window.THREE;\n    const container = containerRef.current;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({ \n      alpha: true, \n      antialias: true,\n      powerPreference: \"high-performance\"\n    });\n    \n    renderer.setSize(container.clientWidth, container.clientHeight);\n    renderer.setClearColor(0x000000, 0);\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n    renderer.outputColorSpace = THREE.SRGBColorSpace;\n    renderer.toneMapping = THREE.ACESFilmicToneMapping;\n    renderer.toneMappingExposure = 1;\n    container.appendChild(renderer.domElement);\n\n    // Enhanced lighting setup\n    const ambientLight = new THREE.AmbientLight(0x404040, 0.3);\n    scene.add(ambientLight);\n\n    const mainLight = new THREE.DirectionalLight(0x00D4FF, 1);\n    mainLight.position.set(10, 10, 5);\n    mainLight.castShadow = true;\n    mainLight.shadow.mapSize.width = 2048;\n    mainLight.shadow.mapSize.height = 2048;\n    scene.add(mainLight);\n\n    const fillLight = new THREE.PointLight(0x1ECBFF, 0.8, 50);\n    fillLight.position.set(-10, 5, 10);\n    scene.add(fillLight);\n\n    const accentLight = new THREE.SpotLight(0x00FFFF, 1, 30, Math.PI / 6, 0.5);\n    accentLight.position.set(0, 15, 0);\n    accentLight.target.position.set(0, 0, 0);\n    scene.add(accentLight);\n    scene.add(accentLight.target);\n\n    // Create enhanced hero robot\n    const robot = createHeroRobot(THREE);\n    scene.add(robot);\n\n    // Enhanced particle system\n    const particleSystem = createParticleSystem(THREE);\n    scene.add(particleSystem);\n\n    // Camera positioning\n    camera.position.set(0, 5, 15);\n\n    // Orbit controls\n    let controls: any = null;\n    if (window.THREE.OrbitControls) {\n      controls = new window.THREE.OrbitControls(camera, renderer.domElement);\n      controls.enableDamping = true;\n      controls.dampingFactor = 0.05;\n      controls.autoRotate = true;\n      controls.autoRotateSpeed = 1;\n      controls.enableZoom = false;\n      controls.enablePan = false;\n      controls.maxPolarAngle = Math.PI / 2;\n      controls.minPolarAngle = Math.PI / 4;\n    }\n\n    // Post-processing for bloom effect\n    let composer: any = null;\n    if (window.THREE.EffectComposer && window.THREE.RenderPass && window.THREE.UnrealBloomPass) {\n      composer = new window.THREE.EffectComposer(renderer);\n      const renderPass = new window.THREE.RenderPass(scene, camera);\n      composer.addPass(renderPass);\n\n      const bloomPass = new window.THREE.UnrealBloomPass(\n        new THREE.Vector2(container.clientWidth, container.clientHeight),\n        0.5, // strength\n        0.4, // radius\n        0.85 // threshold\n      );\n      composer.addPass(bloomPass);\n    }\n\n    // Animation loop\n    const animate = () => {\n      animationIdRef.current = requestAnimationFrame(animate);\n\n      // Update controls\n      if (controls) {\n        controls.update();\n      }\n\n      // Robot animations\n      if (robot) {\n        robot.rotation.y += 0.005;\n        robot.position.y = Math.sin(Date.now() * 0.001) * 0.3;\n        \n        // Animate arms\n        robot.children.forEach((child: any, index: number) => {\n          if (child.userData && child.userData.isArm) {\n            child.rotation.z = Math.sin(Date.now() * 0.002 + index) * 0.3;\n          }\n        });\n\n        // Pulse glow effect\n        const glowIntensity = (Math.sin(Date.now() * 0.003) + 1) * 0.5;\n        robot.children.forEach((child: any) => {\n          if (child.material && child.material.emissive) {\n            child.material.emissiveIntensity = 0.1 + glowIntensity * 0.2;\n          }\n        });\n      }\n\n      // Particle animations\n      if (particleSystem) {\n        particleSystem.rotation.y += 0.001;\n        const positions = particleSystem.geometry.attributes.position.array;\n        for (let i = 1; i < positions.length; i += 3) {\n          positions[i] += Math.sin(Date.now() * 0.001 + i) * 0.001;\n        }\n        particleSystem.geometry.attributes.position.needsUpdate = true;\n      }\n\n      // Render\n      if (composer) {\n        composer.render();\n      } else {\n        renderer.render(scene, camera);\n      }\n    };\n\n    animate();\n\n    // Handle resize\n    const handleResize = () => {\n      if (!container) return;\n      const width = container.clientWidth;\n      const height = container.clientHeight;\n      \n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderer.setSize(width, height);\n      \n      if (composer) {\n        composer.setSize(width, height);\n      }\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    // Store references\n    sceneRef.current = scene;\n    rendererRef.current = renderer;\n    robotRef.current = robot;\n    composerRef.current = composer;\n    controlsRef.current = controls;\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (animationIdRef.current) {\n        cancelAnimationFrame(animationIdRef.current);\n      }\n      if (container && renderer.domElement) {\n        container.removeChild(renderer.domElement);\n      }\n      if (controls) {\n        controls.dispose();\n      }\n      renderer.dispose();\n    };\n  }, []);\n\n  return <div ref={containerRef} className={`three-container ${className}`} />;\n}\n\n// Helper function for creating hero robot\nfunction createHeroRobot(THREE: any) {\n  const robot = new THREE.Group();\n\n  // Main body with PBR materials\n  const bodyGeometry = new THREE.BoxGeometry(2, 3, 1.5);\n  const bodyMaterial = new THREE.MeshPhysicalMaterial({\n    color: 0x2A2A2A,\n    metalness: 0.7,\n    roughness: 0.2,\n    emissive: 0x001133,\n    emissiveIntensity: 0.1\n  });\n  const body = new THREE.Mesh(bodyGeometry, bodyMaterial);\n  body.castShadow = true;\n  body.receiveShadow = true;\n  robot.add(body);\n\n  // Glowing head\n  const headGeometry = new THREE.BoxGeometry(1.5, 1.5, 1.2);\n  const headMaterial = new THREE.MeshPhysicalMaterial({\n    color: 0x00D4FF,\n    metalness: 0.8,\n    roughness: 0.1,\n    emissive: 0x00D4FF,\n    emissiveIntensity: 0.3\n  });\n  const head = new THREE.Mesh(headGeometry, headMaterial);\n  head.position.y = 2.2;\n  head.castShadow = true;\n  robot.add(head);\n\n  // Arms with joints\n  for (let side = -1; side <= 1; side += 2) {\n    const armGroup = new THREE.Group();\n    armGroup.userData = { isArm: true };\n    \n    const shoulderGeometry = new THREE.SphereGeometry(0.3);\n    const shoulderMaterial = new THREE.MeshPhysicalMaterial({\n      color: 0x00FFFF,\n      metalness: 1,\n      roughness: 0,\n      emissive: 0x00FFFF,\n      emissiveIntensity: 0.2\n    });\n    const shoulder = new THREE.Mesh(shoulderGeometry, shoulderMaterial);\n    shoulder.position.set(side * 1.5, 1, 0);\n    \n    const armGeometry = new THREE.BoxGeometry(0.5, 2, 0.5);\n    const armMaterial = new THREE.MeshPhysicalMaterial({\n      color: 0xC0C0C0,\n      metalness: 0.9,\n      roughness: 0.1\n    });\n    const arm = new THREE.Mesh(armGeometry, armMaterial);\n    arm.position.set(side * 1.5, -0.5, 0);\n    arm.castShadow = true;\n    \n    armGroup.add(shoulder);\n    armGroup.add(arm);\n    robot.add(armGroup);\n  }\n\n  // Glowing eyes\n  const eyeGeometry = new THREE.SphereGeometry(0.1, 8, 6);\n  const eyeMaterial = new THREE.MeshPhongMaterial({\n    color: 0x00FFFF,\n    emissive: 0x00FFFF,\n    emissiveIntensity: 1\n  });\n\n  const leftEye = new THREE.Mesh(eyeGeometry, eyeMaterial);\n  leftEye.position.set(-0.3, 2.3, 0.6);\n  robot.add(leftEye);\n\n  const rightEye = new THREE.Mesh(eyeGeometry, eyeMaterial);\n  rightEye.position.set(0.3, 2.3, 0.6);\n  robot.add(rightEye);\n\n  robot.position.set(5, 0, 0);\n  return robot;\n}\n\nfunction createParticleSystem(THREE: any) {\n  const particleGeometry = new THREE.BufferGeometry();\n  const particleCount = 150;\n  const positions = new Float32Array(particleCount * 3);\n\n  for (let i = 0; i < particleCount * 3; i += 3) {\n    positions[i] = (Math.random() - 0.5) * 40;\n    positions[i + 1] = (Math.random() - 0.5) * 40;\n    positions[i + 2] = (Math.random() - 0.5) * 40;\n  }\n\n  particleGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n\n  const particleMaterial = new THREE.PointsMaterial({\n    color: 0x00D4FF,\n    size: 0.1,\n    transparent: true,\n    opacity: 0.6,\n    blending: THREE.AdditiveBlending\n  });\n\n  return new THREE.Points(particleGeometry, particleMaterial);\n}","size_bytes":9104},"client/src/components/three/robot-scene.tsx":{"content":"import { useEffect, useRef } from \"react\";\n\ndeclare global {\n  interface Window {\n    THREE: any;\n  }\n}\n\nexport default function RobotScene() {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const sceneRef = useRef<any>(null);\n  const rendererRef = useRef<any>(null);\n  const robotRef = useRef<any>(null);\n  const animationIdRef = useRef<number>(0);\n\n  useEffect(() => {\n    if (!containerRef.current || !window.THREE) return;\n\n    const THREE = window.THREE;\n    const container = containerRef.current;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(75, container.clientWidth / container.clientHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });\n    \n    renderer.setSize(container.clientWidth, container.clientHeight);\n    renderer.setClearColor(0x000000, 0);\n    container.appendChild(renderer.domElement);\n\n    // Lighting\n    const ambientLight = new THREE.AmbientLight(0x404040, 0.4);\n    scene.add(ambientLight);\n\n    const pointLight = new THREE.PointLight(0x00D4FF, 1, 100);\n    pointLight.position.set(10, 10, 10);\n    scene.add(pointLight);\n\n    // Create robot\n    const robot = new THREE.Group();\n\n    // Robot body\n    const bodyGeometry = new THREE.BoxGeometry(2, 3, 1.5);\n    const bodyMaterial = new THREE.MeshPhongMaterial({ \n      color: 0x2A2A2A,\n      shininess: 100\n    });\n    const body = new THREE.Mesh(bodyGeometry, bodyMaterial);\n    robot.add(body);\n\n    // Robot head\n    const headGeometry = new THREE.BoxGeometry(1.5, 1.5, 1.2);\n    const headMaterial = new THREE.MeshPhongMaterial({ \n      color: 0x00D4FF,\n      shininess: 100\n    });\n    const head = new THREE.Mesh(headGeometry, headMaterial);\n    head.position.y = 2.2;\n    robot.add(head);\n\n    // Robot arms\n    const armGeometry = new THREE.BoxGeometry(0.5, 2, 0.5);\n    const armMaterial = new THREE.MeshPhongMaterial({ \n      color: 0xC0C0C0,\n      shininess: 100\n    });\n\n    const leftArm = new THREE.Mesh(armGeometry, armMaterial);\n    leftArm.position.set(-1.5, 0, 0);\n    robot.add(leftArm);\n\n    const rightArm = new THREE.Mesh(armGeometry, armMaterial);\n    rightArm.position.set(1.5, 0, 0);\n    robot.add(rightArm);\n\n    // Robot eyes\n    const eyeGeometry = new THREE.SphereGeometry(0.1, 8, 6);\n    const eyeMaterial = new THREE.MeshPhongMaterial({ \n      color: 0x00FFFF,\n      emissive: 0x00FFFF,\n      emissiveIntensity: 0.5,\n      shininess: 100\n    });\n\n    const leftEye = new THREE.Mesh(eyeGeometry, eyeMaterial);\n    leftEye.position.set(-0.3, 2.3, 0.6);\n    robot.add(leftEye);\n\n    const rightEye = new THREE.Mesh(eyeGeometry, eyeMaterial);\n    rightEye.position.set(0.3, 2.3, 0.6);\n    robot.add(rightEye);\n\n    robot.position.set(5, 0, 0);\n    scene.add(robot);\n\n    // Particle system\n    const particleGeometry = new THREE.BufferGeometry();\n    const particleCount = 100;\n    const positions = new Float32Array(particleCount * 3);\n\n    for (let i = 0; i < particleCount * 3; i += 3) {\n      positions[i] = (Math.random() - 0.5) * 50;\n      positions[i + 1] = (Math.random() - 0.5) * 50;\n      positions[i + 2] = (Math.random() - 0.5) * 50;\n    }\n\n    particleGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n\n    const particleMaterial = new THREE.PointsMaterial({\n      color: 0x00D4FF,\n      size: 0.1,\n      transparent: true,\n      opacity: 0.6\n    });\n\n    const particleSystem = new THREE.Points(particleGeometry, particleMaterial);\n    scene.add(particleSystem);\n\n    camera.position.z = 15;\n    camera.position.y = 5;\n\n    // Mouse interaction\n    let mouseX = 0;\n    let mouseY = 0;\n\n    const handleMouseMove = (event: MouseEvent) => {\n      mouseX = event.clientX - window.innerWidth / 2;\n      mouseY = event.clientY - window.innerHeight / 2;\n    };\n\n    document.addEventListener('mousemove', handleMouseMove);\n\n    // Animation loop\n    const animate = () => {\n      animationIdRef.current = requestAnimationFrame(animate);\n\n      // Robot animation\n      robot.rotation.y += 0.01;\n      robot.position.y = Math.sin(Date.now() * 0.001) * 0.5;\n      robot.rotation.x = mouseY * 0.0005;\n      robot.rotation.z = mouseX * 0.0005;\n\n      // Particle animation\n      particleSystem.rotation.y += 0.002;\n\n      renderer.render(scene, camera);\n    };\n\n    animate();\n\n    // Handle resize\n    const handleResize = () => {\n      if (!container) return;\n      camera.aspect = container.clientWidth / container.clientHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(container.clientWidth, container.clientHeight);\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    // Store references\n    sceneRef.current = scene;\n    rendererRef.current = renderer;\n    robotRef.current = robot;\n\n    // Cleanup\n    return () => {\n      document.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('resize', handleResize);\n      if (animationIdRef.current) {\n        cancelAnimationFrame(animationIdRef.current);\n      }\n      if (container && renderer.domElement) {\n        container.removeChild(renderer.domElement);\n      }\n      renderer.dispose();\n    };\n  }, []);\n\n  return <div ref={containerRef} className=\"three-container\" />;\n}\n","size_bytes":5249},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/countdown-timer.tsx":{"content":"import { useState, useEffect } from \"react\";\n\nexport default function CountdownTimer() {\n  const [timeLeft, setTimeLeft] = useState({\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0\n  });\n\n  useEffect(() => {\n    const targetDate = new Date(\"2025-09-10T00:00:00\").getTime();\n\n    const timer = setInterval(() => {\n      const now = new Date().getTime();\n      const difference = targetDate - now;\n\n      if (difference > 0) {\n        setTimeLeft({\n          days: Math.floor(difference / (1000 * 60 * 60 * 24)),\n          hours: Math.floor((difference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n          minutes: Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60)),\n          seconds: Math.floor((difference % (1000 * 60)) / 1000)\n        });\n      } else {\n        setTimeLeft({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n      }\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, []);\n\n  return (\n    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 max-w-2xl mx-auto\">\n      <div className=\"bg-card/50 backdrop-blur-md rounded-lg p-4 border border-primary/30\">\n        <div className=\"text-2xl md:text-3xl font-bold text-primary animate-pulse-glow\">\n          {timeLeft.days}\n        </div>\n        <div className=\"text-sm text-muted-foreground\">DAYS</div>\n      </div>\n      <div className=\"bg-card/50 backdrop-blur-md rounded-lg p-4 border border-primary/30\">\n        <div className=\"text-2xl md:text-3xl font-bold text-primary animate-pulse-glow\">\n          {timeLeft.hours}\n        </div>\n        <div className=\"text-sm text-muted-foreground\">HOURS</div>\n      </div>\n      <div className=\"bg-card/50 backdrop-blur-md rounded-lg p-4 border border-primary/30\">\n        <div className=\"text-2xl md:text-3xl font-bold text-primary animate-pulse-glow\">\n          {timeLeft.minutes}\n        </div>\n        <div className=\"text-sm text-muted-foreground\">MINUTES</div>\n      </div>\n      <div className=\"bg-card/50 backdrop-blur-md rounded-lg p-4 border border-primary/30\">\n        <div className=\"text-2xl md:text-3xl font-bold text-primary animate-pulse-glow\">\n          {timeLeft.seconds}\n        </div>\n        <div className=\"text-sm text-muted-foreground\">SECONDS</div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2244},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/event-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport EventModal from \"@/components/ui/event-modal\";\nimport { ReactNode } from \"react\";\n\ninterface EventCardProps {\n  title: string;\n  prize: string;\n  entryFee: string;\n  venue?: string;\n  teamSize?: string;\n  icon: ReactNode;\n  description: string;\n  borderColor: string;\n  titleColor: string;\n}\n\nexport default function EventCard({ \n  title, \n  prize, \n  entryFee, \n  venue, \n  teamSize, \n  icon, \n  description, \n  borderColor,\n  titleColor \n}: EventCardProps) {\n  return (\n    <Card className={`card-hover bg-gradient-to-br from-card to-muted/20 rounded-xl border ${borderColor} transition-all duration-300 hover:scale-105`}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className={`font-bold text-2xl ${titleColor}`}>{title}</h3>\n          <div className=\"w-12 h-12 bg-gradient-to-r from-primary to-cyan-400 rounded-lg flex items-center justify-center\">\n            {icon}\n          </div>\n        </div>\n        \n        <div className=\"space-y-3\">\n          <div className=\"flex justify-between\">\n            <span className=\"text-muted-foreground\">Prize Pool:</span>\n            <span className=\"font-bold text-green-400\">{prize}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-muted-foreground\">Entry Fee:</span>\n            <span className=\"font-bold\">{entryFee}</span>\n          </div>\n          {venue && (\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Venue:</span>\n              <span className=\"font-bold\">{venue}</span>\n            </div>\n          )}\n          {teamSize && (\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Team Size:</span>\n              <span className=\"font-bold\">{teamSize}</span>\n            </div>\n          )}\n        </div>\n        \n        <p className=\"text-muted-foreground mt-4 text-sm\">\n          {description}\n        </p>\n        \n        <div className=\"mt-6 flex justify-center\">\n          <EventModal title={title} description={description} />\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2256},"client/src/components/ui/event-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { X } from \"lucide-react\";\n\ninterface EventModalProps {\n  title: string;\n  description: string;\n  children?: React.ReactNode;\n}\n\nconst eventDetails = {\n  \"ROBO WAR\": \"Step into the thrilling arena of Robowar, where engineering ingenuity meets fierce competition. Witness custom-built machines clashing in an electrifying test of strategy, durability, and operator skill. With sparks flying and adrenaline surging, only the toughest bots will survive each round. Experience the excitement as teams push their robots—and nerves—to the limit in the quest for victory.\",\n  \n  \"ROBO SOCCER\": \"Join the fast-paced world of Robo Soccer, where small but mighty robots battle to score goals with precision and teamwork. The field comes alive with robotic players executing passes, dribbles, and unstoppable shots, all guided by talented human strategists. Each match is packed with robotic excitement, nail-biting moves, and a race against the clock to outscore the rivals.\",\n  \n  \"ROBO SUMO\": \"Enter the circle for Robo Sumo, a true test of balance, technique, and mechanical muscle. In this showdown, robots grapple and push in a test of strength, aiming to force their opponents out of the arena. Every second counts as competitors adjust tactics, maneuver for better positions, and boldly attempt to become the last bot standing in a battle of engineering wits.\",\n  \n  \"DRONE RACE\": \"Soar to new heights with the Drone Race, a mesmerizing spectacle of aerial skill and speed. Participants navigate challenging obstacle courses, weaving through tight gates and making split-second maneuvers while chasing the fastest lap time. The atmosphere buzzes with excitement as pilots demonstrate incredible control and daring, keeping the audience riveted to each suspenseful flight.\",\n  \n  \"OBSTACLE RACE\": \"Take on the ultimate Obstacle Race, where brave robots conquer a gauntlet of ramps, mud, and ever-changing terrain. Each turn presents new challenges—steep climbs, tricky bridges, and surprise barriers. Will your robot maintain agility and traction? The event pushes designs to their limits, rewarding the teams with the most resilient and adaptable creations.\",\n  \n  \"LINE FOLLOWER\": \"Test the intelligence and finesse of your autonomous designs in the Line Follower event! Sleek, sensor-driven robots zoom around intricate tracks, relying only on their programming and sensors to stay on course. The competition is fierce as every millisecond counts, and only the sharpest bots with the best algorithms make it to the finish line in record time.\"\n};\n\nexport default function EventModal({ title, description, children }: EventModalProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const eventDescription = eventDetails[title as keyof typeof eventDetails] || description;\n\n  const handleOpen = () => {\n    setIsOpen(true);\n  };\n\n  const handleClose = () => {\n    setIsOpen(false);\n  };\n\n  return (\n    <>\n      <Button \n        onClick={handleOpen}\n        variant=\"outline\" \n        className=\"border-2 border-primary/50 text-primary hover:bg-primary/20 hover:border-primary transition-all duration-300 neon-border\"\n      >\n        Details\n      </Button>\n\n      {isOpen && (\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\n          {/* Backdrop */}\n          <div \n            className=\"fixed inset-0 bg-black/80 backdrop-blur-sm\"\n            onClick={handleClose}\n          />\n          \n          {/* Modal Content */}\n          <div className=\"relative z-50 w-full max-w-2xl mx-4 bg-card/95 backdrop-blur-md border-2 border-primary/30 rounded-xl p-6 neon-border\">\n            {/* Close Button */}\n            <button \n              onClick={handleClose}\n              className=\"absolute top-4 right-4 text-muted-foreground hover:text-foreground transition-colors\"\n            >\n              <X className=\"w-6 h-6\" />\n            </button>\n\n            {/* Content */}\n            <div className=\"space-y-4\">\n              <h2 className=\"text-2xl font-bold text-primary mb-4\">\n                {title}\n              </h2>\n              <p className=\"text-muted-foreground leading-relaxed text-lg\">\n                {eventDescription}\n              </p>\n              {children}\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}","size_bytes":4386},"client/src/components/ui/floating-action-button.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { ExternalLink, Rocket } from \"lucide-react\";\n\ninterface FloatingActionButtonProps {\n  href: string;\n  text: string;\n  icon?: React.ReactNode;\n  className?: string;\n}\n\nexport default function FloatingActionButton({ \n  href, \n  text, \n  icon = <Rocket className=\"w-5 h-5\" />,\n  className = \"\" \n}: FloatingActionButtonProps) {\n  const [isHovered, setIsHovered] = useState(false);\n\n  const handleClick = () => {\n    window.open(href, '_blank', 'noopener,noreferrer');\n  };\n\n  return (\n    <Button\n      onClick={handleClick}\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n      className={`\n        fixed bottom-6 right-6 z-50 \n        bg-gradient-to-r from-primary to-cyan-400 \n        text-black font-semibold text-lg\n        px-6 py-4 rounded-full\n        shadow-2xl border-2 border-primary/30\n        transition-all duration-300 ease-out\n        hover:scale-110 hover:shadow-primary/50\n        animate-pulse-glow\n        ${isHovered ? 'animate-none shadow-primary/60' : ''}\n        ${className}\n      `}\n    >\n      <div className=\"flex items-center space-x-2\">\n        {icon}\n        <span className=\"hidden sm:inline\">{text}</span>\n        <ExternalLink className=\"w-4 h-4\" />\n      </div>\n      \n      {/* Ripple effect */}\n      <div className={`\n        absolute inset-0 rounded-full\n        bg-gradient-to-r from-primary/30 to-cyan-400/30\n        transition-all duration-500\n        ${isHovered ? 'scale-150 opacity-0' : 'scale-100 opacity-0'}\n      `} />\n    </Button>\n  );\n}","size_bytes":1619},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/robot-gallery.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogTrigger } from \"@/components/ui/dialog\";\nimport EnhancedRobotScene from \"@/components/three/enhanced-robot-scene\";\n\ninterface RobotGalleryProps {\n  className?: string;\n}\n\nexport default function RobotGallery({ className = \"\" }: RobotGalleryProps) {\n  const [selectedRobot, setSelectedRobot] = useState<number | null>(null);\n\n  const robots = [\n    {\n      id: 1,\n      name: \"Battle Bot Alpha\",\n      category: \"Combat Robot\",\n      description: \"High-powered combat robot with reinforced armor\",\n      image: \"https://images.unsplash.com/photo-1518709268805-4e9042af2176?w=400&h=300&fit=crop\"\n    },\n    {\n      id: 2,\n      name: \"Navigation Pro\",\n      category: \"Line Follower\",\n      description: \"Precision navigation with advanced sensors\",\n      image: \"https://images.unsplash.com/photo-1485827404703-89b55fcc595e?w=400&h=300&fit=crop\"\n    },\n    {\n      id: 3,\n      name: \"Soccer Champion\",\n      category: \"Soccer Bot\",\n      description: \"Autonomous soccer robot with ball handling\",\n      image: \"https://images.unsplash.com/photo-1507146426996-ef05306b995a?w=400&h=300&fit=crop\"\n    },\n    {\n      id: 4,\n      name: \"Aerial Racer\",\n      category: \"Drone\",\n      description: \"High-speed racing drone with FPV capability\",\n      image: \"https://images.unsplash.com/photo-1473968512647-3e447244af8f?w=400&h=300&fit=crop\"\n    },\n    {\n      id: 5,\n      name: \"Sumo Warrior\",\n      category: \"Sumo Bot\",\n      description: \"Compact but powerful sumo wrestling robot\",\n      image: \"https://images.unsplash.com/photo-1518709268805-4e9042af2176?w=400&h=300&fit=crop\"\n    },\n    {\n      id: 6,\n      name: \"Obstacle Master\",\n      category: \"All-Terrain\",\n      description: \"Versatile robot for complex obstacle courses\",\n      image: \"https://images.unsplash.com/photo-1485827404703-89b55fcc595e?w=400&h=300&fit=crop\"\n    }\n  ];\n\n  return (\n    <section className={`py-20 px-4 ${className}`}>\n      <div className=\"max-w-7xl mx-auto\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"font-bold text-4xl md:text-5xl mb-6 text-primary\">\n            ROBOT GALLERY\n          </h2>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            Explore our collection of competition robots and discover the technology behind each design\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {robots.map((robot) => (\n            <Dialog key={robot.id}>\n              <DialogTrigger asChild>\n                <Card className=\"card-hover bg-card/50 border-primary/30 cursor-pointer group overflow-hidden\">\n                  <div className=\"relative h-48 overflow-hidden\">\n                    <img \n                      src={robot.image} \n                      alt={robot.name}\n                      className=\"w-full h-full object-cover transition-transform duration-300 group-hover:scale-110\"\n                    />\n                    <div className=\"absolute inset-0 bg-gradient-to-t from-background/80 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300\">\n                      <div className=\"absolute bottom-4 left-4 right-4\">\n                        <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center mx-auto animate-pulse\">\n                          <span className=\"text-black font-bold\">3D</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <h3 className=\"font-bold text-lg text-foreground group-hover:text-primary transition-colors\">\n                        {robot.name}\n                      </h3>\n                      <span className=\"text-xs bg-primary/20 text-primary px-2 py-1 rounded\">\n                        {robot.category}\n                      </span>\n                    </div>\n                    <p className=\"text-muted-foreground text-sm\">\n                      {robot.description}\n                    </p>\n                  </CardContent>\n                </Card>\n              </DialogTrigger>\n              \n              <DialogContent className=\"max-w-4xl w-full h-[80vh] bg-background border-primary/30\">\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 h-full\">\n                  <div className=\"relative bg-card/20 rounded-lg overflow-hidden\">\n                    <EnhancedRobotScene \n                      sceneType=\"gallery\"\n                      enableBloom={true}\n                      enableOrbitControls={true}\n                      autoRotate={true}\n                      className=\"w-full h-full\"\n                    />\n                  </div>\n                  \n                  <div className=\"flex flex-col justify-center space-y-6\">\n                    <div>\n                      <h2 className=\"font-bold text-3xl text-primary mb-2\">\n                        {robot.name}\n                      </h2>\n                      <span className=\"text-lg bg-primary/20 text-primary px-3 py-1 rounded\">\n                        {robot.category}\n                      </span>\n                    </div>\n                    \n                    <div className=\"space-y-4\">\n                      <div>\n                        <h3 className=\"font-semibold text-lg mb-2\">Description</h3>\n                        <p className=\"text-muted-foreground\">\n                          {robot.description}\n                        </p>\n                      </div>\n                      \n                      <div>\n                        <h3 className=\"font-semibold text-lg mb-2\">Specifications</h3>\n                        <div className=\"space-y-2 text-sm\">\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-muted-foreground\">Weight:</span>\n                            <span>2.5 kg</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-muted-foreground\">Power:</span>\n                            <span>12V LiPo Battery</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-muted-foreground\">Sensors:</span>\n                            <span>Ultrasonic, Camera, IMU</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-muted-foreground\">Processor:</span>\n                            <span>Raspberry Pi 4</span>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div>\n                        <h3 className=\"font-semibold text-lg mb-2\">Competition Ready</h3>\n                        <div className=\"flex flex-wrap gap-2\">\n                          <span className=\"bg-green-500/20 text-green-400 px-2 py-1 rounded text-xs\">\n                            ✓ Tested\n                          </span>\n                          <span className=\"bg-blue-500/20 text-blue-400 px-2 py-1 rounded text-xs\">\n                            ✓ Calibrated\n                          </span>\n                          <span className=\"bg-purple-500/20 text-purple-400 px-2 py-1 rounded text-xs\">\n                            ✓ Competition Legal\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":7934},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/committee.tsx":{"content":"import { useRef } from \"react\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\n// Import patron images\nimport patron1 from \"@assets/WhatsApp Image 2025-08-02 at 21.36.52_f3cc000f_1754153416829.jpg\";\nimport patron2 from \"@assets/WhatsApp Image 2025-08-02 at 21.38.37_a8ac5823_1754153425396.jpg\";\nimport patron3 from \"@assets/WhatsApp Image 2025-08-02 at 21.41.22_d936c770_1754153433909.jpg\";\nimport patron4 from \"@assets/WhatsApp Image 2025-08-02 at 21.42.00_0831c823_1754153443848.jpg\";\n\n// Import advisory committee images\nimport advisory1 from \"@assets/WhatsApp Image 2025-08-02 at 23.13.36_0c4e11e2_1754158317341.jpg\";\nimport advisory2 from \"@assets/WhatsApp Image 2025-08-02 at 23.14.07_176379bf_1754158327627.jpg\";\nimport advisory3 from \"@assets/WhatsApp Image 2025-08-02 at 23.15.12_6b492eb2_1754158348044.jpg\";\nimport advisory4 from \"@assets/WhatsApp Image 2025-08-02 at 23.21.39_216dbee4_1754158361459.jpg\";\nimport advisory5 from \"@assets/WhatsApp Image 2025-08-02 at 23.21.40_b1683fba_1754158370770.jpg\";\nimport advisory6 from \"@assets/WhatsApp Image 2025-08-02 at 23.21.41_56288fdd_1754158380721.jpg\";\nimport advisory7 from \"@assets/image_1754158431342.png\";\nimport advisory8 from \"@assets/WhatsApp Image 2025-08-02 at 23.24.16_c742e764_1754158451185.jpg\";\nimport advisory9 from \"@assets/WhatsApp Image 2025-08-02 at 23.25.25_3a61b955_1754158472871.jpg\";\nimport advisory10 from \"@assets/WhatsApp Image 2025-08-02 at 23.22.01_7db63d1d_1754158509264.jpg\";\n\n// Import core team images\nimport core1 from \"@assets/WhatsApp Image 2025-08-03 at 01.40.11_2ad1582e_1754166623947.jpg\";\nimport core2 from \"@assets/WhatsApp Image 2025-08-03 at 01.40.32_21880a83_1754166663787.jpg\";\nimport core3 from \"@assets/WhatsApp Image 2025-08-03 at 01.40.44_33c52f26_1754166706696.jpg\";\nimport core4 from \"@assets/WhatsApp Image 2025-08-03 at 01.41.27_587a91fb_1754166739482.jpg\";\nimport core5 from \"@assets/WhatsApp Image 2025-08-03 at 01.41.01_0e40a1f0_1754166766545.jpg\";\nimport core6 from \"@assets/WhatsApp Image 2025-08-03 at 01.41.11_7a672186_1754166784421.jpg\";\n\n// Import developer team images\nimport dev1 from \"@assets/WhatsApp Image 2025-08-03 at 02.12.36_9c7b1733_1754167484753.jpg\";\nimport dev2 from \"@assets/WhatsApp Image 2025-08-03 at 02.13.29_9b630484_1754167503162.jpg\";\nimport dev3 from \"@assets/WhatsApp Image 2025-08-03 at 02.13.49_e850fada_1754167519212.jpg\";\n\ninterface CommitteeMember {\n  id: string;\n  name: string;\n  designation: string;\n  image?: string;\n}\n\n// Patron data from the provided information\nconst patrons: CommitteeMember[] = [\n  {\n    id: \"1\",\n    name: \"Dr. T. R. Paarivendhar\",\n    designation: \"Founder cum Chancellor\",\n    image: patron1\n  },\n  {\n    id: \"2\", \n    name: \"Dr. P. Ravi Pachamoothoo\",\n    designation: \"Pro-Chancellor (Admin)\",\n    image: patron2\n  },\n  {\n    id: \"3\",\n    name: \"Dr. P Sathyanarayanan\",\n    designation: \"Pro-Chancellor (Academics)\",\n    image: patron3\n  },\n  {\n    id: \"4\",\n    name: \"Dr. R. Shivakumar\", \n    designation: \"Vice President\",\n    image: patron4\n  }\n];\n\n// Advisory Committee data from the provided images and document\nconst advisoryCommittee: CommitteeMember[] = [\n  {\n    id: \"advisory-1\",\n    name: \"Dr. C. Muthamizhchelvan\",\n    designation: \"Vice-Chancellor, SRMIST\",\n    image: advisory1\n  },\n  {\n    id: \"advisory-2\", \n    name: \"Dr. S. Ponnusamy\",\n    designation: \"Registrar, SRMIST\",\n    image: advisory2\n  },\n  {\n    id: \"advisory-3\",\n    name: \"Prof. M. Leenus J Martin, Ph.D.\",\n    designation: \"Dean (CET), SRMIST\",\n    image: advisory3\n  },\n  {\n    id: \"advisory-4\",\n    name: \"Prof. B. Neppolian, Ph.D.\",\n    designation: \"Dean (Research), SRMIST\",\n    image: advisory4\n  },\n  {\n    id: \"advisory-5\",\n    name: \"Dr. Revathi Venkataraman\",\n    designation: \"Chairperson, SoC, SRMIST\",\n    image: advisory5\n  },\n  {\n    id: \"advisory-6\",\n    name: \"Dr. Pushpalatha M\",\n    designation: \"Assoc. Chairperson, SoC, SRMIST\",\n    image: advisory6\n  },\n  {\n    id: \"advisory-7\",\n    name: \"Dr G.Niranjana\",\n    designation: \"Professor & Head, C.TECH., SRMIST\",\n    image: advisory7\n  },\n  {\n    id: \"advisory-8\",\n    name: \"Dr. Poorvammal E\",\n    designation: \"Convenor\",\n    image: advisory8\n  },\n  {\n    id: \"advisory-9\",\n    name: \"Dr. Sowmiya B\",\n    designation: \"Co-convenor\",\n    image: advisory9\n  },\n  {\n    id: \"advisory-10\",\n    name: \"Dr. Subramanian V\",\n    designation: \"Visiting Professor\",\n    image: advisory10\n  }\n];\n\nconst coreMembers: CommitteeMember[] = [\n  {\n    id: \"core-1\",\n    name: \"Shivam Bansal\",\n    designation: \"President ISD Lab\",\n    image: core1\n  },\n  {\n    id: \"core-2\", \n    name: \"Harshil Malhotra\",\n    designation: \"Member\",\n    image: core2\n  },\n  {\n    id: \"core-3\",\n    name: \"Ashwin Kumar A\",\n    designation: \"Member\", \n    image: core3\n  },\n  {\n    id: \"core-4\",\n    name: \"Harsh Arora\",\n    designation: \"Member\",\n    image: core4\n  },\n  {\n    id: \"core-5\",\n    name: \"Keshav Gupta\",\n    designation: \"Member\",\n    image: core5\n  },\n  {\n    id: \"core-6\",\n    name: \"Shan Neeraj\",\n    designation: \"Member\",\n    image: core6\n  }\n];\n\nconst developers: CommitteeMember[] = [\n  {\n    id: \"dev-1\",\n    name: \"Aadarsh Jaiswal\",\n    designation: \"Lead\",\n    image: dev1\n  },\n  {\n    id: \"dev-2\",\n    name: \"Swapnil Vats\",\n    designation: \"Co-Lead\",\n    image: dev2\n  },\n  {\n    id: \"dev-3\",\n    name: \"Aayushman Ghodture\",\n    designation: \"Co-Lead\",\n    image: dev3\n  }\n];\n\ninterface MemberCardProps {\n  member: CommitteeMember;\n}\n\nfunction MemberCard({ member }: MemberCardProps) {\n  return (\n    <Card className=\"group transition-all duration-300 hover:shadow-lg hover:shadow-primary/20 border-primary/20 hover:border-primary/40 bg-card/50 backdrop-blur-sm min-w-[280px] flex-shrink-0 neon-border hover:animate-pulse-glow\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex flex-col items-center text-center space-y-4\">\n          <div className=\"w-32 h-32 rounded-full overflow-hidden border-2 border-primary/30 group-hover:border-primary/60 transition-colors relative\">\n            {member.image ? (\n              <img\n                src={member.image}\n                alt={`${member.name} – ${member.designation}`}\n                className=\"w-full h-full object-cover transition-transform duration-300 group-hover:scale-110\"\n              />\n            ) : (\n              <div className=\"w-full h-full bg-gradient-to-br from-primary/10 to-cyan-400/10 flex items-center justify-center\">\n                <div className=\"w-16 h-16 rounded-full bg-primary/20\" />\n              </div>\n            )}\n            <div className=\"absolute inset-0 rounded-full bg-gradient-to-tr from-transparent via-primary/10 to-cyan-400/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300\"></div>\n          </div>\n          <div className=\"space-y-2\">\n            <h3 className=\"font-semibold text-lg text-foreground group-hover:text-primary transition-colors\">\n              {member.name}\n            </h3>\n            <p className=\"text-muted-foreground text-sm group-hover:text-cyan-400 transition-colors\">\n              {member.designation}\n            </p>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\ninterface CommitteeScrollerProps {\n  members: CommitteeMember[];\n  title: string;\n}\n\nfunction CommitteeScroller({ members, title }: CommitteeScrollerProps) {\n  const scrollRef = useRef<HTMLDivElement>(null);\n\n  const scroll = (direction: 'left' | 'right') => {\n    if (scrollRef.current) {\n      const scrollAmount = 300;\n      const newScrollLeft = scrollRef.current.scrollLeft + (direction === 'right' ? scrollAmount : -scrollAmount);\n      scrollRef.current.scrollTo({\n        left: newScrollLeft,\n        behavior: 'smooth'\n      });\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-3xl font-bold text-foreground\">{title}</h2>\n        <div className=\"flex space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"icon\"\n            onClick={() => scroll('left')}\n            className=\"border-primary/20 hover:border-primary/40 hover:bg-primary/10\"\n          >\n            <ChevronLeft className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"icon\"\n            onClick={() => scroll('right')}\n            className=\"border-primary/20 hover:border-primary/40 hover:bg-primary/10\"\n          >\n            <ChevronRight className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n      \n      <div\n        ref={scrollRef}\n        className=\"flex space-x-6 overflow-x-auto scrollbar-hide pb-4\"\n        style={{ scrollbarWidth: 'none', msOverflowStyle: 'none' }}\n      >\n        {members.map((member) => (\n          <MemberCard key={member.id} member={member} />\n        ))}\n      </div>\n    </div>\n  );  \n}\n\nexport default function Committee() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Hero Section */}\n      <section className=\"pt-24 pb-16 px-4 bg-gradient-to-b from-background to-background/50\">\n        <div className=\"max-w-7xl mx-auto text-center\">\n          <h1 className=\"text-4xl md:text-6xl font-bold bg-gradient-to-r from-primary via-cyan-400 to-primary bg-clip-text text-transparent mb-6\">\n            Committee\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            Meet the distinguished leaders, advisors, and team members driving ROBOFEST 2025 forward\n          </p>\n        </div>\n      </section>\n\n      <div className=\"max-w-7xl mx-auto px-4 space-y-16 pb-16\">\n        {/* Patrons Section */}\n        <section className=\"space-y-8\">\n          <h2 className=\"text-3xl font-bold text-foreground text-center\">Patrons</h2>\n          \n          {/* Desktop Layout - Horizontal Row */}\n          <div className=\"hidden md:grid md:grid-cols-2 lg:grid-cols-4 gap-6 justify-items-center\">\n            {patrons.map((patron) => (\n              <MemberCard key={patron.id} member={patron} />\n            ))}\n          </div>\n          \n          {/* Mobile Layout - Horizontal Scroll */}\n          <div className=\"md:hidden\">\n            <div className=\"flex space-x-6 overflow-x-auto scrollbar-hide pb-4\">\n              {patrons.map((patron) => (\n                <MemberCard key={patron.id} member={patron} />\n              ))}\n            </div>\n          </div>\n        </section>\n\n        {/* Advisory Committee Section */}\n        <section>\n          <CommitteeScroller \n            members={advisoryCommittee} \n            title=\"Advisory Committee\" \n          />\n        </section>\n\n        {/* Core Members Section */}\n        <section>\n          <CommitteeScroller \n            members={coreMembers} \n            title=\"Core Members\" \n          />\n        </section>\n\n        {/* Developers Section */}\n        <section>\n          <CommitteeScroller \n            members={developers} \n            title=\"Developers\" \n          />\n        </section>\n      </div>\n    </div>\n  );\n}","size_bytes":11147}}}